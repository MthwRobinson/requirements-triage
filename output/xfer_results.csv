source,target,t5_label,t5,actual
"""multilabel classification: aio lock is burning hot --- We have a single, extremely hot, aio lock.  (nni_aio_lock).    This is a serious limit for scalability and performance.  We need to break this up.    There are at least two approaches that can be done.    The simplest, and least dramatic, and probably least beneficial, would simply to break up the expire thread into one thread per cpu core with its own lock, and randomly(?) assign one of these to the aio on initialization.    A smarter, but trickier, approach might be to alter the aios so that they have their own lock, and then to freeze the expire thread when working on them.  This can be a hold and release thing.  Since the expire threads should run only rarely, contention should be relatively infrequent.    A combination of approaches could be used, to further break out contention even on the expiration logic.  (It is the expiration threads that require us to have the single global lock.)    There may be other approaches as well, but initial efforts to use two locks without freezing""",performance,performance,1,1
"""multilabel classification: Build example objects lazily --- This follows on from the work in #1830 of making the example collection *even lazier*.    The basic design principle here is to make `Example` just a thin shim indexing into a more compact representation. This representation stores a compact record of the set of `start_example/stop_example/draw_bits` call and compact representations of any property that has been accessed on an `Example` object for the current collection.    The code involves is... a bit weird. However I genuinely think a decorator that transforms a nested class into a method *is* the nicest way to represent this.    Note that there is now a certain amount of logical redundancy in the code which really should be merged. In particular `Examples` and `Blocks` work quite differently, and `ExampleRecord` and `DataObserver` are fairly similar in how they work. The medium term goal would be to merge as follows:    * `Blocks` would move to work like `Examples` does in this PR.  * `DataTree` would gain some of the logic from `E""",performance,performance,1,1
"""multilabel classification: When hazelcast is chosen as clustering provider & 2nd level cache for hibernate, fast profile will not work --- """,bug,performance,1,0
multilabel classification: Error 500 instead of 401 on XAuthTokenFilter.doFilter when an AuthenticationException is thrown --- ,bug,bug,0,0
"""multilabel classification: Initial implementation of the new Base Game Template --- Initial implementation of the new Base Game Template and some starting modules.    This makes some tweaks to the engine to support this, specifically, it tweaks the hardcoded shaderpaths to defer to a pref variable, so none of the shader paths are hardcoded.    Also tweaks how post effects read in texture files, removing a bizzare filepath interpretation choice, where if the file path didn't start with / it forcefully appended the script's file path. This made it impossible to have images not in the same dir as the script file defining the post effect.    This was changed and the existing template's post effects tweaked for now to just add ./ to those few paths impacted, as well as the perf vars to support the non-hardcoded shader paths in the engine.""",feature,feature,0,0
"""multilabel classification: Temporary decals as a save/load feature. --- The unintended saving of decal files in #2178 leads me to think that saving/loading temporary decals could be useful for some game types/levels, particularly if those decals have very long lifespans such as explosion scorch marks for example.""",feature,feature,0,0
"""multilabel classification: Implements a simple version of stall-on-demand for CH queries. --- This is a simple version of stall-on-demand that leads to a 1.5x speed up of CH queries on the osm map for Germany. Also see discussion in: https://github.com/graphhopper/graphhopper/issues/240.  I put the stall-on-demand version of the bidirectional ch dijkstra into a separate class, because PrepareContractionHierarchies already seems very large (?). I thought it would be better to leave it up to configuration whether stall-on-demand is used or not. I also added some measurement tests for stall on demand in the measurement class. Not sure if this is really needed, but for testing it is helpful at the moment. I might test some of the more aggressive versions of stall on demand if I find the time.""",feature,performance,1,0
multilabel classification: React : Component unit test cases are excluded from Jest configuration --- ,bug,bug,0,0
"""multilabel classification: Slow speed on _out to a file --- Hi,  We're using sh 1.11 because of 1.12 breaks most of our code.    Our workflow is like this.  - We call a app and tell it the input file (approx 25G)  - That app outputs to stdout (unfortunately)  - We redirect output to a file (approx 40G)    In this case, bash finished 3-4 times faster. For applications that support outputting to a file, we use that but for applications that output to stdout only, we're stuck with sh's _out option.    We usually don't use piping and this is an issue of output redirection""",performance,performance,1,1
multilabel classification: Jest did not exit one second after the test run has completed. --- ,bug,bug,0,0
"""multilabel classification: Small performance patch for Numpy arrays --- By removing the overhead of composite when it's not needed (I did say small!).    This also makes it very easy to deprecate passing a strategy for shape and/or dtype later, which I find seriously tempting.  Looking at new shape-dependent strategies from #1829 and #1784, I think we might want to push users in the direction of either use a constant shape, or use `@composite` or `data()` to combine several shape-dependent things.    But it's not clear when that might land or whether we want deprecate passing a strategy for dtype too, and we have until midyear to finalise any deprecations for 5.0, so I'm holding off for now.""",performance,performance,1,1
multilabel classification: Wrong number of users in user management table pager --- ,bug,bug,0,0
multilabel classification: Jest is 3x slower on all windows machines (Windows 10 and lower) --- ,bug,performance,1,0
"""multilabel classification: Accessing completion attributes is very slow ---   This code takes 6.6s on my laptop.  Removing the line mentioned above, it then goes down to 0.5s.    Any idea on why this happens and how the completion can be made faster?""",performance,performance,1,1
"""multilabel classification: Adds the getSignedAngleBetweenVectors function --- Adds the getSignedAngleBetweenVectors function, which is like the existing getAngleBetweenVectors, but will returned a signed angle value, which helps to inform the full 360 angle, rather than the 'nearest 180'.""",feature,feature,0,0
multilabel classification: Ci-Cd Jenkins - Frontend tests finally stage does not work : No result on reports ! --- ,bug,bug,0,0
multilabel classification: Benchmark eval_bit in univariate polynomial for different integer types --- See https://github.com/symengine/symengine/pull/875#discussion_r56742454 ,performance,performance,1,1
multilabel classification: login failure on new jhipster project with mongo and oauth2 --- ,bug,bug,0,0
"""multilabel classification: Issue 289; Adding country functionality --- Added country functionality. - grunt data adds countries to packed and unpacked data from meta data - Now can parse either Zone or Country code, if country, will return an array with a moment for each zone within the country. Did consider adding all moments methods to array methods however decided not to because it is bad practice and the user can apply the moment methods to the array using .map . All of the moments within the array will be of different zones within the country however some of the zones may have the same time, it is for the user to filter the ones they want or find the unique times. - Added user endpoints added such as: tz._countries, tz.addCountry, tz.addZonetoCountry, tz.removeZonefromCountry, tz.country and tz.unpackCountry. - tz._countries is similar to tz._zones and is where all the country data can be accessed, - tz.addCountry is used to add a new country(should not be needed as all IANA countries exist), - tz.addZonetoCountry is to add a new zone to an existing """,feature,feature,0,0
"""multilabel classification: """"AL: PSSM Cascade Viz"""" tool-button --- Adds a debug toggle for the script-exposed global found https://github.com/GarageGames/Torque3D/blob/c152ae86f3f09b3c1d736954b352723d274582f1/Engine/source/lighting/advanced/advancedLightBinManager.cpp#L168 """,feature,feature,0,0
multilabel classification: DXTnm Parallax OGL implementation --- Companion PR to #719 to add the OGL side implementation ,feature,feature,0,0
multilabel classification: Wrong version of jest-cli is executed when jest is installed next to an existing install of jest-cli --- ,bug,bug,0,0
"""multilabel classification: test_series_generic is too slow --- In Debug mode it takes 8s on my computer, while every other test takes < 0.1s. This should be fixed to run in 0.1s or less, if at all possible.   """,performance,performance,1,1
multilabel classification: Add country to the Zone object --- Sorry if I misunderstanding the way to use the library. I have a requirement to get the country code from the time zone name (for example `US` would correspond to `America/Los_Angeles`. Currently the country is not percolating through in the `Zone` object as described here:    Am I missing something? Is it possible to put a request to add it?  Thanks. ,feature,feature,0,0
multilabel classification: wiredep doesn't get bower files injected after app is generated for first time --- ,bug,bug,0,0
"""multilabel classification: Massive performance drop in test_blacklisted_characters --- While testing some other changes, I stumbled across the fact that `test_blacklisted_characters` now takes a very long time to run.    This can be seen in https://travis-ci.org/HypothesisWorks/hypothesis/jobs/504749908, and seems to be linked to #1846 in some way.""",performance,performance,1,1
multilabel classification: \HH\Asio\curl_exec takes 100% cpu while waiting if no other work being awaited --- ,performance,performance,1,1
multilabel classification: Build failed: mvn clean test sonar:sonar due missing TESTS-results-sonar.xml --- ,bug,bug,0,0
"""multilabel classification: Could use an nn_list_node_remove_nocheck() --- nni_list_node_remove() removes a list node from the list, but includes a check to ensure that the list is already on the node.     There are cases on the hot code path where this safety check is not needed, and eliminating it would save a conditional branch.  Since conditional branches are *expensive* (pipeline stalls), elimination of this can be a significant net win.    Even better, we could make this a macro, and inline it.""",performance,feature,0,1
"""multilabel classification: Tests fail to run in a VirtualBox synced folder with a Windows guest VM, cannot find module 'source-map-support' --- """,bug,bug,0,0
"""multilabel classification: Entity type blob with MySQL DB only allows to store 65,535 bytes of data --- """,bug,performance,1,0
"""multilabel classification: initial work towards generic weighting&encoding ('more flexible' work) --- See [the forum](https://discuss.graphhopper.com/t/more-flexibility-in-gh/71) for more discussion.  There are lots of TODOs and currently no integration tests, so it is not time to merge but to play around for you. You can currently configure the average speed of the highways the (car-like) vehicle should use. E.g. overwrite residential, tertiary and secondary via [this request](http://localhost:8989/?point=52.462913%2C13.387871&point=52.529486%2C13.399372&vehicle=generic&weighting=generic&highways.secondary=35&highways.tertiary=30&highways.residential=30). """,feature,feature,0,0
"""multilabel classification: Efficient path for unique collections --- This special-cases `lists(sampled_from(...), unique_by=...)` with an algorithm adapted from `permutations()`.  Using a shuffle instead of rejection sampling means each element can be considered once; in turn this means that the size of the collection is not capped by our inability to find any remaining elements.    Closes #1617.""",performance,performance,1,1
"""multilabel classification: Added gui functionality for vehicle re-mapping as per #950 --- Added vehicle re-mapping functionality for the vehicle movements (forward, backward, brake).  Essentially just added a branched functionality if re-mapped functionality is vehicular without affecting the original functionality. Please let me know if there is anything to change.""",feature,feature,0,0
"""multilabel classification: There seems to have some problem with cacheBuster, it always gives 400 Bad Request --- """,bug,bug,0,0
multilabel classification: Grunt test fail when OAuth2 and spring-websocket are selected --- ,bug,bug,0,0
multilabel classification: Grunt test fails after adding a new language (version 2.18) --- ,bug,bug,0,0
"""multilabel classification: Quantization code performance. --- Hi,  I need to use this on arm. I read the tiny_quantized_conv2d_kernel code, but it seems a brute_force one without using gemmlowp. Meanwhile, tiny-dnn seems only support the fc layer with gemmlowp. How can this play an amazing performance?    Thanks""",performance,performance,1,1
"""multilabel classification: Unix timestamp in stats/requests --- I'm polling the JSON block in stats/requests, but I'm creating my own Unix time:  https://github.com/bbc/locust-load-tests/blob/master/tests/lib/stats.py#L30  I wondered if you can add the Unix time to the API to avoid any time lag issues that may occur.  """,feature,performance,1,0
multilabel classification: Cached account data should be force loading on main page ??? --- ,bug,feature,0,0
"""multilabel classification: Initial commit for the new base template. --- Replaces the Empty and Full templates with a new, re-factored Base Template. """,feature,feature,0,0
multilabel classification: [Bug]  babel-jest throws if `only` in babel.config.js excludes current file --- ,bug,bug,0,0
multilabel classification: Hazelcast for hibernate cache: the user can't log in --- ,bug,bug,0,0
"""multilabel classification: macOS pthread locks *hurt* --- Apple, in their infinite wisdom, has seen fit to provide fairness guarantees on pthread locks, such that an application will be badly penalized for dropping and reacquiring a mutex.  This has been measured to have impacts of up to 20 us in the local IPC latency test just adding a single uncontended mutex.    We didn't design with fairness in mind, and instead expect that pthread locks are *cheap*.    There is an undocumented lock, os_unfair_lock (and documented but deprecated OSSpinLock), which is superior on this platform for our needs (extremely cheap locking).    It looks like we need to create a darwin platform proper that uses these locks, but we will need to think about how to make this work with condition variables.    Note that this isn't required for *functionality*, but this change may be needed to make it work *performantly* on macOS.    Some links for reference:    https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man3/spinlock.3.html    htt""",performance,performance,1,1
multilabel classification: How to refresh token while using x-auth-token based authentication? --- ,bug,feature,0,0
"""multilabel classification: Allow to block area per request --- This PR intents to improve #789. You can either block areas (given as BBox), points (closest edge from Lat,Lng), or by edge_id.    This is currently implemented only for the GenericWeighting, as my Approach is to inject the Weighting and change the weight of certain edges.    Here is an example. This is the unblocked route:  ![block_nothing](https://cloud.githubusercontent.com/assets/1553525/20655025/aca2463c-b572-11e6-854b-af483048b919.png)    This is the route with the black area blocked:  ![blocked_area](https://cloud.githubusercontent.com/assets/1553525/20655035/c6f89c84-b572-11e6-8f43-62336d8f9435.png)    This is the route with the black area and black point blocked:  ![blocked_area_point](https://cloud.githubusercontent.com/assets/1553525/20655034/c36a75f6-b572-11e6-8394-70b48d0b3690.png)    All three cases can be seen in the new Integration test.    Things we might want to add:    - Returned the blocked edge ids, this would allow us to cache the blocked edges for further request""",feature,feature,0,0
multilabel classification: Security issue with tracking logged in users with websocket --- ,bug,bug,0,0
"""multilabel classification: Jedi hangs for a long time with DataFrame containing timestamps --- Hi! Neat tool, thanks for publishing it and maintaining it.    I'm using jedi `0.10.2`. Python `3.6`, and Jupyter Notebook `5` and ipython `6`.    **Quick summary**    * Completions take upwards of 30 seconds with a DataFrame with 1Mrow and 2 columns, if one of the columns is a timestamp.  * The runtime scales with the number of rows in the DataFrame.  * Waiting 30 seconds or more for completions is too long - during which time no other computation can take place.  * If you interrupt the kernel during jupyter doing the completion, the kernel dies - leading to dataloss and inconvenience (maybe this is a jupyter notebook or ipython bug?).  * It was tricky to figure out this was a jedi problem. It felt for a long time like a jupyter or ipython problem.  * Sending `KeyboardInterrupt` during a manual `Interpreter()` invocation reveals that jedi is running `df.values`, which takes many seconds to run for the aforementioned DataFrame (maybe this is a pandas bug?).    ---    Since I've upgrade""",performance,performance,1,1
"""multilabel classification: Enum's values are not displayed correctly with a """"_"""" --- """,bug,bug,0,0
"""multilabel classification: Slow completion for existing object with long `__repr__` method --- Hi,    For completion with existing objects it seems that the `__repr__()` method is evaluated for an error message within the inspect module which is afterward caught. This makes the completion as slow as `__repr__()` while this evaluation in unnecessary for the user. This method can bee rather slow with big pandas objects or custom class.    This as been seen here :  [qtconsole issue #90](https://github.com/jupyter/qtconsole/issues/90)    A minimal code to reproduce it :      And a more convenient working version :      Jedi seems to end here through jedi/evaluate/compiled/mixed.py, line 121.  Maybe making checks before the calling `inspect.getsourcefile()` could fix it, but not I don't know jedi enough to claim it.""",performance,performance,1,1
multilabel classification: --findRelatedTests failed to resolve typescript modules declared in declaration files --- ,bug,bug,0,0
multilabel classification: [Bug] Impossible to delete users that have oauth2 tokens associated with them --- ,bug,bug,0,0
multilabel classification: Performance is quite down after new refactoring and extension approach ---   Thinking about making two variants: - super fast but not so easy to extend - highly extensible but a bit slower ,performance,performance,1,1
multilabel classification: @WithMockOAuth2Authentication doesn't work due to a security fix from spring --- ,bug,bug,0,0
multilabel classification: AbstractAuditingEntity not working for update for entities with dto --- ,bug,bug,0,0
multilabel classification: Missing import in DTO when use option Blob in entity Generator --- ,bug,bug,0,0
"""multilabel classification: Feature request: on_quit() --- There is a way to define a method that executes when a task set starts; ie, on_start().  It would be useful to have a similar method, on_quit() when the task set is terminated.  I want my task set to share a common identifier. I create this in on_start(). A side effect of the tests is to create an artifact with this identifier in the name. When the tests terminate, I want the artifact to be deleted.  I've tried using the events.on_quitting event for this. However, as far as I can tell, this is called in the context of the Locust object, not in the context of the task itself. """,feature,feature,0,0
"""multilabel classification: Obtain the last block's length without having to create it --- This eliminates the one call site that was causing `Block` allocation during generation, after #1830.    (It was originally a part of #1862, but I pulled it out here because it's a perfectly fine incremental improvement on its own.)    In theory this could enable some simplifications of the lazy block management code, but in practice I haven't actually investigated any of those yet.""",performance,feature,0,1
multilabel classification: CSRF Issue in Version 2.25 with Hazelcast session replication --- ,bug,bug,0,0
"""multilabel classification: High memory usage concern --- I could run example_cifar_train program with Win32 build in the past. (around 8227365f4c40fcb4d3b0d1e7f6a171f363370dd1)  But now (23c64be6e155d6056e8289c6e570759a26d4088a), example_cifar_train program throws an exception.  call stack   main     train_cifar10       network<sequential>::train         network<sequential>::normalize_tensor           aligned_allocator<double,64>::allocate  The cause is high memory usage. The number of training images in The CIFAR-10 dataset is 50000 and the size of each image is 32 x 32. So memory consumption for input std::vector<vec_t> is 50000 x 32(w) x 32(h) x 3(ch) x 8(double). In total, it is roughly 1.14GiB.  And recently(from 97ac8364349088dee1afdd86b613a237a1fe19d8) network::train converts inputs argument into input_tensor local variable, so it probablly means memory usage is more than doubled.  I can workaround the problem with 64-bit build, but I hope memory footprint will be reduced. """,performance,performance,1,1
multilabel classification: Add a duk_harray fast path to the internal duk_unpack_array_like() helper --- The helper is used by bound function and .apply() handling. Tasks:    - [x] Add the basic fast path  - [x] Conditional: doesn't do Array.prototype index lookups (technically noncompliant); low memory  - [x] Releases,performance,feature,0,1
"""multilabel classification: Jest notify option error """"Jest did not exit..."""" and no coverage summary --- """,bug,bug,0,0
multilabel classification: Add explicit duk_hdecenv and duk_objenv scope objects --- Previously generic objects were used for declarative and object environments. Using specific duk_hobject subclasses is faster because the internal control properties don't need to be looked up using ordinary property lookups but are directly accessible within the struct. Also optimize some other minor scope handling code.    Tasks:  - [x] Resolve FIXMEs  - [x] Check if object environment this_binding could be reduced to a provide this_binding flag  - [x] Fix bytecode dump/load fallout  - [x] Fix ROM built-ins fallout (without inherit option)  - [x] Add artificial debugger object inspection properties  - [x] Fix other debugger fallout  - [x] Internal documentation fixes (e.g. debugger artificial properties)  - [x] Manual perf measurements  - [x] Rename objenv->with_this?  - [x] Releases entry,performance,feature,0,1
multilabel classification: [Feature] Close Event --- How to close sweet alert without clicking confirm button? Is there available close event or am I missing? e.g.:   ,feature,feature,0,0
"""multilabel classification: Expose an on_hatch event? And/or hatch number (e.g. we just hatched user number X) as well --- The API docs mention a `hatch_complete` event hook. That's useful but I don't always care to know about all users started (could monitor from other metrics in the test environment).    What could be useful to me is a way to track a hatch event, to do something on hatch.     On a related note, it would also be helpful to know what each hatched user's number is (when they hatched as in I'm user number X). Helpful for data association to users based on ID/number. You don't always want to do it randomly, sometimes yes.    So, could we get an `on_hatch` event hook?     What would be nice also would be if we could get whatever locust uses to track the current hatch count (or equivalent) available as an attribute to read from. Something like JMeter's thread number/count property where in code you can figure out which user/thread number you are for whatever load logic you are trying to do. (e.g. `self.locust.hatch_number`)""",feature,feature,0,0
"""multilabel classification: Polygon for blocked areas --- This PR allows block areas to support polygons (discuss [here](https://discuss.graphhopper.com/t/polygon-for-blocked-areas/1464) and [here](https://discuss.graphhopper.com/t/restricted-routing-zones-specified-by-a-polygon/2318/10))    How this works (it's in Portuguese, Centro means Center):  ![poligono](https://user-images.githubusercontent.com/3869224/37092921-4fd44f08-21ec-11e8-9a68-24aecb510719.gif)      """,feature,feature,0,0
multilabel classification: allow negative lights --- This allow use different color lights    Old PR by Daniel: https://github.com/GarageGames/Torque3D/pull/430  https://www.garagegames.com/community/forums/viewthread/132593  https://github.com/crabmusket/Torque3D/commits/allow-negative-lights,feature,feature,0,0
multilabel classification: TestScheduler does not follow order of projects in config --- ,bug,bug,0,0
multilabel classification: Deploying fresh app to Openshift I get an error with NPM INSTALL --- ,bug,bug,0,0
"""multilabel classification: URL_PREFIX feature for web UI? --- Hi,  Is it possible to add a --url-prefix option for the web ui, so that proxy setups can run the web ui under a sub-url? We want to run locust proxied behind our https server, which proxies other services like @Jahaja 's ps-dash, and to do this requires any assets being loaded to be fetched either relative to ./ or full-pathed under a known prefix.  Thanks, Jeff """,feature,feature,0,0
"""multilabel classification: Make duk_hstring charlen lazy --- For most strings the character length (`.length`) is not accessed. It's currently precomputed which slows down every string intern operation. Change that behavior so that the character length is computed lazily when it is first needed.    Tasks:  - [x] Change charlen and intern handling  - [x] Test effect in practice  - [x] Because of footprint impact, maybe make lazy/strict behavior optional => follow-up  - [x] Releases entry""",performance,performance,1,1
multilabel classification: Implementation of guiRenderTargetVizCtrl --- Implementation of guiRenderTargetVizCtrl which allows you to feed a render target and have it display.    Also added a gui to the editor that can open a window and has a drop-down selection of named targets that can be viewed.,feature,feature,0,0
"""multilabel classification: Eliminate socket filters on message queues --- The message queue filter code is a bit slow, and should be removed.  The only consumer of this at present is the old SUB framework, which could use it's own internal code to do subscription filtering.  This would let us remove this lock and save overall performance for the vast majority of use cases.""",performance,performance,1,1
multilabel classification: Issues with deploying app on AWS - No Solution Stack named '64bit Amazon Linux 2015.03 v1.4.1 running Tomcat 8 Java 8' found --- ,bug,bug,0,0
multilabel classification: Build in Jenkins failing with or without root (npm VS docker) --- ,bug,bug,0,0
"""multilabel classification: Guess current timezone --- This adds the ability to guess the browser's timezone. See #138. ### Demo  http://jsfiddle.net/bvjxt7jr/11/ ### Implementation  The implementation is fairly similar to [jstimezonedetect](https://github.com/HenningM/jstimezonedetect). We look through a whitelist of zones and check if the offset matches in both January and June.  There are about 500 different timezone identifiers, and about 60 unique January/June offset pairs in use this year. [The limitations of jstimezonedetect](https://github.com/HenningM/jstimezonedetect#limitations) also apply here. We don't differentiate between `Europe/Berlin` and `Europe/Stockholm` as they are equivalent in recent years. ### Whitelisted names  These are the whitelisted timezone names for each January/June offset pair.  | Jan | Jul | Timezone Name | | --- | --- | --- | | -11:00 | -11:00 | Pacific/Pago_Pago | | -10:00 | -10:00 | Pacific/Honolulu | | -10:00 | -09:00 | America/Adak | | -09:30 | -09:30 | Pacific/Marquesas | | -09:00 | -09:00 | Pacific""",feature,feature,0,0
multilabel classification: Make routing time-dependent --- Related to #831     Currently only the public transit routing is really time-dependent.     Traffic data integration and CH road routing are not the goals of this issue.,feature,feature,0,0
multilabel classification: Adds the ability to define types of assets to be auto-loaded --- Adds the ability to define types of assets to be auto-loaded when the module is initialized.,feature,feature,0,0
"""multilabel classification: Retrieving stats when running with --no-web --- What is the recommended way of retrieving stats from locust when running with '--no-web'?   I am currently running a load test programmatically and with the web interface disabled, I am unable to poll stats/requests/csv while the test is running.  I tried using the log file with '--print-stats' but the stats are not printed to the log.  Thanks!  """,feature,performance,1,0
multilabel classification: Entity Resource Test - Bug when an entity is created with a Blob attribute --- ,bug,bug,0,0
multilabel classification: Test suite failed to run. Your test suite must contain at least one test. --- ,bug,bug,0,0
multilabel classification: Creating an entity called Document when using mongodb leads to broken Application --- ,bug,bug,0,0
multilabel classification: Initial implementation of the EditorTool class and world editor hook-in. --- ,feature,feature,0,0
multilabel classification: Cannot open entity page for generated entities including a field with type enum --- ,bug,bug,0,0
multilabel classification: faster object instantiation --- Hi !  Is Mongoengine performing any data integrity check on load/read ? While data integrity is important to me on write it is a lot less on read  Asking because the model instantiation can be a bit slow and not sure what is causing it. ,performance,performance,1,1
multilabel classification: Detail page is weird since .dl-horizontal has been replaced by .row --- ,bug,bug,0,0
"""multilabel classification: ClientPackageManager is set to npm in jdl, but jhipster sets yarn in angular.json --- """,bug,bug,0,0
multilabel classification: Adds gui3DProjectionCtrl --- Adds gui3DProjectionCtrl so a gui control can be tracked to a point in 3d space,feature,feature,0,0
"""multilabel classification: Refactored OSM Shapefile importer --- Fixes / changes completed    1. Highway tag – we’re now using this (not used before, previously the code was using a hardcoded speed or max speed if non-zero).    1. Max speed tag now passed properly to the encoders. Added a filter for value “0” as in Geofabrik shapefiles 0 means no tag, but 0 will probably just mean 0 speed in the Graphhopper flag encoders…    1. One way tags now used properly. Previously the code was only checking for “0” and treating this as boolean. You also have to check for against the direction of digitisation (e.g. value “-1” if its one-way against the directory of digitisation). Also Geofabrik is using an odd (unfortunately non-standard) convention for their shapefile oneway field; I now read this convention but turn into the standard convention in the ReaderWay I pass to the flag encoders. This could break in the future if Geofabrik clean this up (the code will throw an exception with a useful message if it breaks).    1. Encoding manager now used properly. I""",feature,feature,0,0
"""multilabel classification: Limiting the number of completions to return --- There are some huge python libraries like `wx` (`brew install wxpython`) with ~4K objects in the root of the module.        This requires 3GB of RAM to run and a lot of time, with twice more time with dry cache.    How could we deal with such libraries? This would hung any completion provider. My first thought would be to return generator on `.completions()` call instead of precomputing all possible completions, so we could ignore some objects if there's too many of them.""",performance,performance,1,1
multilabel classification: Angular: user management page bugged when trying to CRUD --- ,bug,bug,0,0
multilabel classification: Expected spy to have been called but it was not called in jest test framework   --- ,bug,bug,0,0
"""multilabel classification: On session expired , Login modal window does not open --- """,bug,bug,0,0
"""multilabel classification: New feature: additional close button --- Please, add cross button option in top right button. """,feature,feature,0,0
multilabel classification: Initial schema creation error when using OAuth2 with Oracle DB --- ,bug,bug,0,0
"""multilabel classification: Use a dedicated TestResult object instead of keeping ConjectureData around --- The main motivation for doing this was memory usage, but I think it actually makes the API much cleaner to have a logical distinction between its data and its result, and it's something I've vaguely felt I should do for a while but never got around to.""",performance,feature,0,1
multilabel classification: Improve performances of the task queue. --- Ensure no new properties are added. Don't use the delete operator. According to previous discussions. ,performance,performance,1,1
multilabel classification: java 7 compilation fails since HikariCP-java6 version 2.4.0 is not in maven repo --- ,bug,bug,0,0
multilabel classification: Add init size for NEWARR opcode (array literal) --- Similar to NEWOBJ init size.    - [x] Add NEWARR init size to compiler  - [x] Add NEWARR init size to executor  - [x] Debugger opcode metadata  - [x] Testcase coverage  - [x] Perf tests  - [x] Releases entry,performance,feature,0,1
multilabel classification: jhipster:entity error if translation vietnamese - _entity_vi.json not found --- ,bug,bug,0,0
multilabel classification: Cannot set negative values for numeric fields of entities --- ,bug,bug,0,0
"""multilabel classification: Adds the RotationF utility math class. --- The class is designed as a general-purpose rotation/orientation class to make it easy to work with rotations and swap between math types as easily as possible.  Cleaned up second go at this, with some reorginizations and fixes. """,feature,feature,0,0
"""multilabel classification: Don't rewrite novel buffers --- Another oh this is one of the the allocation hotspots and there's no good reason for it to be PR which is unlikely to have a huge impact in and of its own right but is small enough that it's worth doing anyway.    When we look up a buffer we rewrite it to see if it corresponds to something we've previously run, but if there's a novel behaviour then we definitely *haven't* run it before, so there's no point in rewriting it. When the buffer is large, doing so can involve a bunch of useless allocations.""",performance,performance,1,1
multilabel classification: Generated entity service name could clash with JHipster service name  --- ,bug,bug,0,0
multilabel classification: Classes that implements Serializable would be nice to have serialVersionUID --- ,bug,feature,0,0
multilabel classification: Mapstruct Implementation assumes that all related entity has a DTO --- ,bug,bug,0,0
multilabel classification: Error when creating many to one entity and trying to choose.  --- ,bug,bug,0,0
multilabel classification: TypeError: Cannot assign to read only property 'Symbol(Symbol.toStringTag)' of object '#<process>' --- ,bug,bug,0,0
multilabel classification: Documentation is unclear on how to handle global variables --- ,bug,documentation,0,0
"""multilabel classification: Add JSON.stringify() fast path for plain buffers --- Virtual index keys are enumerable, so result is e.g. `{0:123,1:10}`.""",performance,feature,0,1
multilabel classification: Add car4wd routing profile --- Allow routing through tracks regardless of their tracktype value. Including support for block_fords and block_barriers config settings. ,feature,feature,0,0
multilabel classification: Very slow PAIR performance compared to nanomsg --- Throughput performance measured with embedded local_thr and remote_thr show 40 times slower performance compared to nanomsg!   nanomsg: > 600.000 msg/sec  nng:         15.000 msg/sec,performance,performance,1,1
multilabel classification: [Feature] Create Angular.js directive --- Is is possible for one to create an Angular.js plugin for this one? ,feature,feature,0,0
"""multilabel classification: Don't bother calculating the giant table of masks that we never use --- See title.    Usage of this field went away in #1846 but the field itself did not. The field itself is potentially quite big, and updating it potentially happens quite often (in my Csmith experiments all `draw_bits` calls are with `n_bits=31`. So this was getting populated on every single call. This was a poor life choice)""",performance,performance,1,1
multilabel classification: Jest 23: Spy on Date.now breaks done() in async tests --- ,bug,bug,0,0
"""multilabel classification: Optimize duk_propdesc filling when property not found --- When looking for a property through the inheritance chain, current code first fills in not found values to the output `duk_propdesc` and then modifies only the necessary fields, e.g. setting e_idx and flags. This happens even when the property is not found, and is done for every level of the inheritance chain check.    Change the code to fill in the `duk_propdesc` only when the property is found. Don't fill in anything if the property is not found, the return code of the lookup is enough for the caller to ignore any values in the struct.    Tasks:  - [x] Rebase  - [x] Check call sites to ensure they respect propdesc lookup return value  - [x] Use explicit return value for find existing entry, fix call sites  - [x] Perf test  - [x] Manual assert test run  - [x] Releases entry""",performance,performance,1,1
multilabel classification: entity sub-generator: invalid dependency between --regenerate and --table-name for entities with reserved words as names --- ,bug,bug,0,0
"""multilabel classification: message queue put_error unused --- The nni_msgq_set_put_error and the nni_msgq_set_error apis are unused.  (The nni_msgq_set_get_error API is still used by the surveyor pattern -- which is something we should fix.)    We should eliminate that code -- using it requires holding locks across longer code flows, including conditional branches which are painful.    This is legacy from when we used the message queue for everything -- these days many patterns simply bypass the upper message queue.""",performance,performance,1,1
"""multilabel classification: Isochrones for public transit --- Like this:    http://localhost:5000/isochrone?point=45.5176544,-122.6781463&pt.earliest_departure_time=2018-07-03T18:43:04Z&time_limit=1200    <img width=758 alt=screen shot 2018-07-03 at 16 18 57 src=https://user-images.githubusercontent.com/520916/42225647-524eb54a-7edd-11e8-9a58-6bc462407d20.png>  """,feature,feature,0,0
multilabel classification: upgrade force option does not work on jhipster modules --- ,bug,bug,0,0
multilabel classification: Jest can't find babel plugin that is installed and exists --- ,bug,bug,0,0
multilabel classification: Regression: Generating a TextBlob creates a file upload field in 4.3.0 --- ,bug,bug,0,0
multilabel classification: nni_aio_set_synch() usually doesn't do anything --- The code for a normal completion (other than timeout) when nni_aio_set_synch() has been called does not actually cause the nni_aio_finish() code to complete the request synchronously.  This potentially leaves a lot of performance on the table.,performance,performance,1,1
multilabel classification: Allow the option to run a single Locust through the UI --- I would like to be able to choose which Locust to run through the UI. This would make it very easy to support having a large corpus of tests and have the option to only run a single one when it suits the user.     The core of this feature relies on the Locust class's `__name__` property. The `LocustRunner` holds a dict of `class.__name__` to `class` in `locust_classes_by_name` and provides a method to building that dict and a way of picking one with `filter_locusts_by_name`.    Right now this only supports running a single Locust or all of them. The web UI has a select that defaults to All:    ![image](https://user-images.githubusercontent.com/2565265/33097052-f373ee02-ced6-11e7-90cc-92c7ab5abc79.png)    And has a list of Locusts to run:    ![image](https://user-images.githubusercontent.com/2565265/33097105-0dfca764-ced7-11e7-8b03-b402f19a1c67.png)    The URL `/swarm` accepts `locust_class` in the POST body but defaults it to `all`. `all` in this case will be converted to `None` when p,feature,feature,0,0
"""multilabel classification: Support 'height', 'weight', 'width' road attributes --- Unrecognized values will be logged and ignored.""",feature,feature,0,0
"""multilabel classification: Restore originally requested URL using all HTTP methods: POST, HEAD... and not only GET --- """,feature,feature,0,0
multilabel classification: Adds ability to skip loading of cached dts in enumColladaForImport --- ,feature,feature,0,0
multilabel classification: Duplicate function track<Entity>ById when 2 relations with same entity --- ,bug,bug,0,0
multilabel classification: Check whether inline parsing can be speed up by using strpbrk() --- http://www.php.net/manual/en/function.strpbrk.php  other useful functions: - http://www.php.net/manual/en/function.strspn.php - http://www.php.net/manual/en/function.strstr.php - http://www.php.net/manual/en/function.strtok.php ,performance,performance,1,1
"""multilabel classification: Performance between rapidjson.FindMember and unordered_map find --- HI guys,    I meet one problem in my project when I try to substitute unordered_map.find with rapidjson.FindMember, the performance seems to be much worse. I am not sure why, dost FindMember with O(1) which I thought, so it seems to be same between FindMember and unordered_map?  Or is that related with key type, while unorderd_map uses integer and rapidjson uses string?    Thanks a lot""",performance,performance,1,1
"""multilabel classification: Move large and rare opcodes into NOINLINE helpers --- Move handling of the following opcodes into NOINLINE helpers to make the main dispatch function smaller and a bit better performing:    - INITSET and INITGET  - TRYCATCH  - ENDTRY  - ENDCATCH  - ENDFIN  - INITENUM and NEXTENUM    There are more potential opcodes for similar treatment, but these are quite clear cases.    Tasks:  - [x] Move opcodes to helpers  - [x] Check if a conditional NOINLINE improves footprint  - [x] Releases entry""",performance,performance,1,1
multilabel classification: Remove lingering Block allocation --- Turns out that as well as lazily allocating `Block` objects as of #1830 we're *also* allocating them on the hot path. 🙄 This removes that code.    I think this must have got screwed up in a rebase as I had a bunch of branches in flight at the time.,performance,feature,0,1
multilabel classification: Can't resolve modules which in sub node_modules after upgrade to 24.1.0 from 23.x --- ,bug,bug,0,0
multilabel classification: ESLint Angular JS issue with the latest Eslint version --- ,bug,bug,0,0
multilabel classification: Block area and roads per request --- We need a built-in functionality for the [forbiddenEdgeId-Weighting](https://github.com/graphhopper/graphhopper/blob/master/docs/core/weighting.md) to block an area or a list of lookups.    Currently this is only possible as a post processing step before the routing via the [overlay mechanism](https://github.com/graphhopper/graphhopper/pull/781)  ,feature,feature,0,0
"""multilabel classification: Maximize priority of nextTick --- Unroll ticks regardless of platform.  Use the highest priority event queue avaliable on each platform.  This should also address issues with Node's newly non-recursive nextTick.  #259.  Seems to have a problem with domains on NodeJS 0.8, but not 0.6 or 0.10. https://travis-ci.org/kriskowal/q/jobs/6231967  Needs cross browser testing. """,performance,performance,1,1
"""multilabel classification: grouping requests after redirect --- #228 asked a similar question, but I don't think it handles the use case where a request redirects.    I don't know what the redirect will look like in advance, so I can't skip it. But I'd like to group all those requests under one path, because the trailing segments are different for every locust. Adding `name=/fubar/` to the initial request didn't seem to do this. Is there another way?   Operationally, I think it would make sense to configure the client in `on_start` so that all requests matching some pattern will be reported as `/fubar/baz`. """,feature,feature,0,0
"""multilabel classification: [performance] Seq / LazySeq removeValue needs optimized --- Currently uses a Stream based optimization which is very slow.  Causes a knock on effect when using mergeMap with a max concurrency level above 1 (as each ActiveSubscriber completing involves a stream removal and Seq recreation),""",performance,performance,1,1
"""multilabel classification: 增加 strict 参数来控制处理声母和韵母时是否严格遵循《汉语拼音方案》标准 --- 为了兼容旧版，目前默认  `strict=True`    当 `strict=True` 时根据 [《汉语拼音方案》](http://www.moe.edu.cn/s78/A19/yxs_left/moe_810/s230/195802/t19580201_186000.html) 的如下规则处理声母、在韵母相关风格下还原正确的韵母：    >    * 21 个声母：b 	p 	m 	f 		d 	t 	n 	l g 	k 	h 			j 	q 	x zh 	ch 	sh 	r 		z 	c 	s （**y，w 不是声母**）  >    * i行的韵母，前面没有声母的时候，写成yi(衣)，ya(呀)，ye(耶)，yao(腰)，you(忧)，yan(烟)，yin(因)，yang(央)，ying(英)，yong(雍)。         （**y 不是声母**）  >    * u行的韵母，前面没有声母的时候，写成wu(乌)，wa(蛙)，wo(窝)，wai(歪)，wei(威)，wan(弯)，wen(温)，wang(汪)，weng(翁)。        （**w 不是声母**）  >    * ü行的韵母，前面没有声母的时候，写成yu(迂)，yue(约)，yuan(冤)，yun(晕)；ü上两点省略。         （**韵母相关风格下还原正确的韵母 ü**）  >    * ü行的韵跟声母j，q，x拼的时候，写成ju(居)，qu(区)，xu(虚)，ü上两点也省略；           但是跟声母n，l拼的时候，仍然写成nü(女)，lü(吕)。          （**韵母相关风格下还原正确的韵母 ü**）  > * iou，uei，uen前面加声母的时候，写成iu，ui，un。例如niu(牛)，gui(归)，lun(论)。        （**韵母相关风格下还原正确的韵母 iou，uei，uen**）    对于类似 https://github.com/mozillazg/python-pinyin/issues/64 https://github.com/mozillazg/python-pinyin/issues/27 的问题，如果想要把 `y, w` 当作声母或者不在乎原始的韵母是什么，可以在调用相关函数时传入关键字参数 `strict=False` 即可。""",feature,feature,0,0
multilabel classification: Allow CasClient to use custom parameters when building callback urls --- ,feature,feature,0,0
multilabel classification: Can't  install other generators from the JHipster Marketplace + blank page for client project  --- ,bug,bug,0,0
"""multilabel classification: Provide type short name function --- `@JSONType` is configured on the class name, but this invades the domain, is there a way to configure it on Config Class?    Form a form like `Config.register(Class clazz, String shortName)`.    When serializing and deserializing, fastjson can match according to the configured short name.""",feature,feature,0,0
"""multilabel classification: Multiple, irrelevant GET Requests on elastic search with an infinite scroll. --- """,bug,bug,0,0
"""multilabel classification: Pub/Sub very slow compared with nanomsg --- ## NNG & Platform details.  nng version 1.0.1 - Fedora 28 - C++    I used the pub/sub pattern and measured peak message throughput of 35k messages per second with an average of 20k messages per second. Using exactly the same code, only replacing the nng specific code with nanomsg I get about 1M messages per second which is not brilliant either but I have made no attempts at optimization so that's fine.    I was very surprised by the difference in performance, am I missing something obvious here?    P.S. I just used the code from the examples both for nanomsg and nng.  """,performance,performance,1,1
multilabel classification: Allow the option to run a single Locust through the UI --- I would like to be able to choose which Locust to run through the UI. This would make it very easy to support having a large corpus of tests and have the option to only run a single one when it suits the user.     The core of this feature relies on the Locust class's `__name__` property. The `LocustRunner` holds a dict of `class.__name__` to `class` in `locust_classes_by_name` and provides a method to building that dict and a way of picking one with `filter_locusts_by_name`.    Right now this only supports running a single Locust or all of them. The web UI has a select that defaults to All:    ![image](https://user-images.githubusercontent.com/2565265/33097052-f373ee02-ced6-11e7-90cc-92c7ab5abc79.png)    And has a list of Locusts to run:    ![image](https://user-images.githubusercontent.com/2565265/33097105-0dfca764-ced7-11e7-8b03-b402f19a1c67.png)    The URL `/swarm` accepts `locust_class` in the POST body but defaults it to `all`. `all` in this case will be converted to `None` when p,feature,feature,0,0
"""multilabel classification: Basic OpenVR Support code --- Adds basic OpenVR support. This also includes support for rendering controllers based on OpenVR data, though this is as of yet incomplete as there are no hooks for the button input.  Much like the oculus support, a script is also provided to handle setting up control input. However this is not hooked in by default for this PR.  The intention of this PR is more to add the support code to the engine and as a basis for identifying regressions with future dx11/gl changes. """,feature,feature,0,0
multilabel classification: Reloading an entity page causes the the menu item labels on the navbar to mysteriously change to attribute names --- ,bug,bug,0,0
multilabel classification: Gateway should not proxy to microservice when token is missing --- ,bug,bug,0,0
"""multilabel classification: Expose StubbingLookupListener publicly and create listener distinction --- Make StubbingLookupListener public. Originating ticket: #770    As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness, let's get the former exposed as public API. This way we build stronger framework with the concept of onion skin API.""",feature,feature,0,0
multilabel classification: OAuth2 documentation is not generated anymore in the README.md since v5.6.0 --- ,bug,bug,0,0
multilabel classification: Bug? Strange behaviour using manual mocks with requestActual with npm packages --- ,bug,bug,0,0
multilabel classification: Deploy on Cloud Foundry using mongoDB (mongolab) does not create seed data --- ,bug,bug,0,0
multilabel classification: Active state for Administartion Tab in UI is not working --- ,bug,bug,0,0
"""multilabel classification: Set textures as bitmapctrl in script --- A new method to GuiBitmapCtrl in order to set named textures as the image displayed in script. Those named textures are created in two places from script (not c++) that I know: as part of GuiOffscreenCanvas (targetName field) and, more useful, as the target of a PostEffect using target = #name (the '#' symbol is not used for this method).  Using a shader in PostEffect (hlsl or glsl) you can rotate images and use masks (texture[0] and texture [1]) and this function allows to display easily that result.  The problem I find is that you need to re-call the method if the texture changes.  Example (directx): Add this maptest.cs (and exec() it somewhere, of course)    In the same folder add: ····mapV.hlsl···· (note: ansi file)    ····mapP.hlsl····(note: ansi file)    Download and name this image map.png: http://i.imgur.com/R1LCLG8.png Download and name this image mask.png: http://i.imgur.com/TCUL2vU.png  Add both images to the same folder, too.  Finally, run the full template game and create """,feature,feature,0,0
"""multilabel classification: Add a minimal implementation of activation/catcher freelists --- Add a very barebones first implementation of activation/catcher freelists, with a very simple logic:  - When allocating, check the freelist first; if not found, use normal allocation.  - When freeing, always queue to the freelist with no upper limit.  - In mark-and-sweep free all entries in the freelist, which periodically gets rid of excess entries.  - In heap destruction, free all entries in the freelist.    A better approach would be to keep track of the freelist size and when freeing an element free it directly if there are already enough entries in the freelist. This is not intentionally done here; the goal of the pull is to bring master into a good baseline after duk_catcher/duk_activation rework, and subsequent pulls will refine the freelist/pooling implementation.    Tasks:  - [x] Rebase once #1487 is merged  - [x] Initial implementation  - [x] Add config option - freelist is not needed on low memory targets (or other targets) with a very efficient pool allocator  - [x] Perform""",performance,performance,1,1
multilabel classification: [DepShield] (CVSS 7.4) Vulnerability due to usage of lodash.sortby:4.7.0 in Jest 24.1.0 --- ,bug,bug,0,0
"""multilabel classification: Turncost for Contraction Hierarchies --- This is a first try of an implementation of turncost support for contraction hierarchies and should fix #270. This code is highly experimental and certainly needs some work.  What works:  - Basic support for turn costs, based on this paper: https://pdfs.semanticscholar.org/4aa9/65d323ccb8b9e7c71de77f910900ff69a773.pdf  - An edge-based, trun-cost respecting version of DijkstraOneToMany. The idea is based on this pull request: https://github.com/graphhopper/graphhopper/pull/394  However, it has mostly been reimplemented based on this code, as there were too many conflicts when trying to merge the pull request into a current master.    Caveats:  - The implementation only supprts a single p-turn at a node. In rare cases, mutliple p-turns might work, but that is highly dependent on the order of node contraction. To understand the issue, assume the following graph:  ![grafik](https://cloud.githubusercontent.com/assets/1858945/21260080/a7577218-c384-11e6-9da9-76d478a945be.png)  Assume that co""",feature,feature,0,0
"""multilabel classification: Improvement for roundtrip calculation --- This PR improves the integration of pull request #582. You can try this out via appending `&algorithm=roundTrip&round_trip.seed=0&round_trip.distance=10000&routing.flexibleMode.force=true` to the URL. Change the seed to introduce some randomness.  The separation seems to work and the round trip looks (still) good :)  ![car-good](https://cloud.githubusercontent.com/assets/129644/14851140/3a68897a-0c7e-11e6-8010-326cdfec4b10.png)  I have created an interface RoutingTemplate and there are 3 implementations: via routing, round trip and alternative. The implemetations are stateful and not thread-safe (which both does not really matter), I could also get rid of the AlgorithmControl.  Also the `algorithm=roundtrip|alternativeRoute` is now a bit fake as it should more be something like `routing_template=roundtrip|alternativeRoute` and then we would have the option to additionally control the used algorithm under the hood. For now I vote to keep it as it is and let the roundtrip implementation """,feature,performance,1,0
"""multilabel classification: fastjson序列化ByteBuffer的问题 --- 1. 我的测试代码是      我使用的fastjson的代码是1.2.56版本    出现的异常是          com.alibaba.fastjson.JSONException: write javaBean error, fastjson version 1.2.56, class java.nio.HeapByteBuffer, method : getDouble    	at com.alibaba.fastjson.serializer.JavaBeanSerializer.write(JavaBeanSerializer.java:523)  	at com.alibaba.fastjson.serializer.JavaBeanSerializer.write(JavaBeanSerializer.java:160)  	at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:285)  	at com.alibaba.fastjson.JSON.toJSONString(JSON.java:731)  	at com.alibaba.fastjson.JSON.toJSONString(JSON.java:669)  	at com.alibaba.fastjson.JSON.toJSONString(JSON.java:634)  	at com.zhaopin.testcase.fastjson.FastJsonCodec.test(FastJsonCodec.java:19)  	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  	at java.lang.reflect.Method.invoke(Method.jav""",feature,bug,0,0
multilabel classification: New table naming strategy makes the tests fail on the sample application --- ,bug,bug,0,0
multilabel classification: Dependency console log is shown before the generator options --- ,bug,bug,0,0
multilabel classification: ALT algorithm for a more dynamic speed up --- I've developed over the last months a new speed up algorithm (actually the initial prototype was done in a day ;))    Enable with:  - `prepare.lm.weightings=fastest` in the config.properties  - append `&ch.disable=true` if CH is enabled    The speedup is 17x faster compared to the fastest flexible algorithm (A* with a distance estimate) for German wide random requests and 16 landmarks. It is 25x faster with 32 landmarks.    The per-request memory improvements are in a similar range i.e. ~X times faster means ~X times less visited nodes. The static memory requirements are comparable to CH for world wide case and 16 landmarks. More memory for more landmarks.    Some other good properties are:  - Optimal routes. 'heuristical nature' can be introduced but yields only a minor speedup (e=1.3) and if epsilon similar chosen like suggested in #506 (e=1.6) it is even much worse.  - The LM preparation can be parallelized and should be possible within a few minutes even for world wide coverage  - ,feature,performance,1,0
multilabel classification: Error in the location response when creating an asset leading to performance test failures --- ,bug,performance,1,0
"""multilabel classification: Add Average Speed as PathDetails to Response --- Fixes #439.    I added the possibility to view details of the calculated as proposed in #439. It should be very easy to extend so we can add different details.     The calculation of the PathDetails is a bit similar to Instructions and maybe in the future we might find that it makes sense to merge them, but not now.    I haven't measured the performance yet, but I can do this if you like the general approach.    Simplification is disabled when adding PathDetails right now.    Right now I don't like two things:  - The data structure, not an issue right now, but maybe if we output osm ids for continental requests? Also see the conversion in the SimpleRouteSerializer. I think, wrapping the PathDetails in a Map again, might be more efficient. Overall it is a bit too much map usage IMHO, but it seems like the right data structure ;).  - The initialization happens in the GraphHopper class, right now not an issue, but once we have more details, we might want to move this somewhere else.     F""",feature,performance,1,0
multilabel classification: Microservices with oauth2 auth and ManyToOne relationship to User with services fail to compile. --- ,bug,bug,0,0
multilabel classification: Tomcat 8 warning: org.apache.catalina.webresources.Cache.getResource Unable to add the resource --- ,bug,bug,0,0
"""multilabel classification: Adds some starting gameObject recreations of various legacy game classes --- Adds some in-progress gameObject recreation of various legacy game classes, such as PlayerObject, AIPlayerObject, Sound Emitter and Static Shape. As well as a simplified way to create them via the AssetDefinitions""",feature,feature,0,0
"""multilabel classification: Faster case insensitive RegExp canonicalization --- Case insensitive RegExp canonicalization needs to normalize a range `[A,B]` of codepoints into a set of normalized ranges. Conceptually each codepoint in the input range is normalized, and the result is one or more ranges. Currently the range is normalized at RegExp compile time one codepoint at a time which is very slow especially because the normalization itself is also relatively slow.    This pull is to figure out a minimal way to speed up the case insensitive RegExp normalization without reworking the Unicode tables extensively.    - [x] Generate codepoint block skip table  - [x] Update algorithm to use skip table  - [x] Testcase: all 64k individual codepoint case insensitive regexps (this takes hours to run, so it's disabled by default)  - [x] Testcase: pin upper limit to both boundary values, run lower index, also cover boundary index for corner case block  - [x] Testcase: pin lower limit, run upper index  - [x] Testcase: all BLKSIZE-1, BLKSIZE, BLKSIZE+1 ranges  - [x] Testcase:""",performance,performance,1,1
multilabel classification: Unit test getAllEntities() fail for a Entity with more than 19 rows. --- ,bug,bug,0,0
multilabel classification: Bad interaction between using `jest.mock` returning mocks with implentation and the `resetMocks` configuration --- ,bug,bug,0,0
multilabel classification: Often properties proportional to the distance like the fuel consumption needs to be taken into account --- We create a new weighting `short_fastest` or similarly named ,feature,feature,0,0
multilabel classification: Jest breakpoints work 10% of the time (Typescript & Node 10) --- ,bug,performance,1,0
"""multilabel classification: Faster finalizer existence check in GC --- One bottleneck in refzero and mark-and-sweep handling is checking whether an object has an own or inherited _Finalizer property. This check walks the prototype chain and does a property lookup for every object. Because most objects don't have a finalizer, the entire prototype chain is typically walked to confirm there's no inherited finalizer.    Improve this behavior by adding a `DUK_HOBJECT_FLAG_HAVE_FINALIZER` flag to `duk_hobject`. The flag is set/cleared when the internal `_Finalizer` property is changed using `duk_set_finalizer()`. Direct property changes won't update the flag, but that's OK because `_Finalizer` is an internal property with opaque semantics (IOW, application shouldn't change it manually).    The flag allows a fast finalizer check by walking the prototype chain and only checking one flag per object instead of doing an actual property lookup.    - [x] Add `DUK_HOBJECT_FLAG_HAVE_FINALIZER` and `duk_hobject_has_finalizer_fast()`  - [x] Use `duk_hobject_has_finalizer_""",performance,performance,1,1
"""multilabel classification: Add an input text comment when confirming an action --- Hi , I want to add an input text in the confirm message like this  http://i.imgur.com/ScqBmGo.png """,feature,feature,0,0
"""multilabel classification: add more path details --- already possible:     - [x] street_name (important for navigation)   - [x] time (nice for ETA predictions e.g. if parts of the route were already travelled)   - [x] edge_id or traversal_key    later when more stuff is stored as edge properties:     - [ ] max_speed (very important for navigation)   - [ ] surface   - [ ] highway type (road_class)   - [ ] ferry,toll,.. (road_environment?)   - [ ] weight, height, ...   - [ ] inner vs. outer city""",feature,feature,0,0
"""multilabel classification: Asset browser initial --- The initial implementation pass for the Asset Browser, and relevant supporting changes to assets, modules, some UI controls, entities and components, and the editors.""",feature,feature,0,0
"""multilabel classification: Add initial alloc size to NEWOBJ opcode (object literals) --- Adding an initial size for property table reduces memory churn when the object literal is populated. The initial size is a good estimate and doesn't need to always match. For example, the value is capped at 255 due to opcode A field limitations, and will be too high if object literal contains duplicate keys.    Tasks:  - [x] NEWOBJ patching in compiler  - [x] NEWOBJ initial size in executor  - [x] Testcase coverage for object literal sizes up to 1000 (covers capped 'A' case)  - [x] Perf test update for performance test of different object literal sizes  - [x] Releases entry  """,performance,performance,1,1
multilabel classification: Cannot read property 'coverageData' of null when trying to generate code coverage --- ,bug,bug,0,0
multilabel classification: Generating an entity with relationship to the User entity and with mapstruct option fails  --- ,bug,bug,0,0
multilabel classification: Adds the ability to define types of assets to be auto-loaded --- Adds the ability to define types of assets to be auto-loaded when the module is initialized.,feature,feature,0,0
multilabel classification: MongoDB tests : conflict port if mongodb instance is running --- ,bug,bug,0,0
multilabel classification: Ai turret clear ignore list --- Implements feature requested in issue #1271   Exposes the ability to clear the entire ai turret ignore list to Torquescript with the function clearIgnoreList()  ,feature,feature,0,0
"""multilabel classification: List of states and counties in path details --- I would like to be able to request administrative_regions in the details. So I can get a list of all administrative regions (coutries, states and counties) the route travels through.    This is something I haven't seen offered anywhere else, and something I've been looking for the last two years. I don't know how hard this is to implement, but the data should be easily available in OSM.""",feature,feature,0,0
"""multilabel classification: Introduce RoadClass, RoadEnvironment, CarMaxSpeed, Surface, Toll and more EncodedValues --- This PR shows how shared EncodedValues look like and how we populate them (via TagParsers). The prefix OSM indicates that such parsers can look differently for a different data source. A TagParser has not necessarily a one-to-one relationship to an EncodedValue. With the new mechanism we can have multiple EncodedValues and just one TagParser like e.g. for height, width and weight.    We likely need RoadClass, RoadEnvironment and a few more to be added by default. (As we could really need them for improving instructions, improving ETAs, finally fixing bugs like #713 for all vehicles, ...)    ![image](https://user-images.githubusercontent.com/129644/53579021-18859500-3b79-11e9-9be7-63ee1dee1142.png)    ![image](https://user-images.githubusercontent.com/129644/53954484-9fd18c00-40d6-11e9-9b43-2a4a3c3dc3c8.png)    The following EncodedValues are available as path detail and could be used to influence the routing for all vehicle profiles (see [removed AvoidWeighting](https://github.com/grap""",feature,feature,0,0
multilabel classification: Application doesnt load i18n files for 5 letter language codes --- ,bug,bug,0,0
"""multilabel classification: fast_parent_copy extremely slow (>1 minute) --- In jedi-vim, `fast_parent_copy` is called every time the cursor moves in insert mode, so it needs to be quick. I was getting an extreme amount of lag in some cases and tracked it down to this function. I measured its execution time and compared it to `deepcopy` and `fast_parent_copy` is usually faster, but when inserting text near the top of the linked file, `fast_parent_copy` is hundreds of times slower:    Here is the (somewhat contrived to demonstrate the problem) code that resulted in that timing: https://gist.github.com/wilywampa/37cbe9051edde8f74e32  Each paragraph with a new figure seems to exponentially increase the time `fast_parent_copy` takes to complete. """,performance,performance,1,1
"""multilabel classification: State change error when navigating to an entity page, when using enumerations and translation --- """,bug,bug,0,0
"""multilabel classification: Huge memory usage with caffe_converter --- @edgarriba noticed some huge memory usage importing caffe models via caffe_converter. I tested the difference of memory usage loading same models on caffe and on tiny-cnn via caffe-converter, here is my findings:  bvlc_reference_caffenet on Caffe: `Maximum resident set size (kbytes): 970476 (0.93 GB)` bvlc_reference_caffenet on Tiny-cnn via caffe_converter: `Maximum resident set size (kbytes): 6142244 (5.86 GB)`  VGG_small on Caffe: `Maximum resident set size (kbytes): 1224384 (1.17 GB)` VGG_small on Tiny-cnn via caffe_converter: `Maximum resident set size (kbytes): 10678848 (10.18 GB)`  @nyanp have you some idea on what causes this difference on RAM usage? @edgarriba is going to adapt the caffe_converter to work on the generic-computational-graph branch, so it would be preferable to fix this issue before replicate it on the new branch """,performance,performance,1,1
multilabel classification: Move session renewal to SessionStore instead of subclasses of DefaultCallbackLogic --- ,feature,feature,0,0
multilabel classification: OAuth Authentication won't allow some special characters in passwords --- ,bug,bug,0,0
multilabel classification: There should be a way to disable OpenCensus stats and tracing --- ,performance,feature,0,1
"""multilabel classification: atomics may be faster than locks --- There are a number of situations (reference counts, etc.) where perhaps we could use atomics instead of locks.  This may help reduce contention and increase performance.  In some of these cases (like bumping a reference count), we don't even care about the final result.""",performance,performance,1,1
"""multilabel classification: Hardware Skinning Support --- - Supports GL, D3D9 & D3D11 - Extends vertex formats & shadergen to support blend indices and weights - Adds basic support for using 4x3 matrices for shader constants - Supports software fallback """,feature,feature,0,0
multilabel classification: Thread dump on the metrics page is not working anymore --- ,bug,bug,0,0
multilabel classification: input::-moz-focus-inner not require on Firefox on Mobile I checked. --- ,feature,bug,0,0
"""multilabel classification: Add an allocation cache for small allocations --- Useful for targets with a slow or fragmenting allocator and where memory is not extremely tight:    For small allocations (say 8 to 128 bytes in 4-byte increments) maintain a cache of allocated memory blocks. When allocating N bytes (N <= 128), check if there is a freelist entry for N bytes (rounded up to 4). If so, use that memory block instead. Otherwise alloc normally. When freeing, queue the block to freelist. Mark-and-sweep could free excessive cached blocks and forcibly free cached blocks in emergency GC.""",performance,performance,1,1
"""multilabel classification: Improve Add::__hash__() and Mul::__hash__() --- This came up in gitter a while ago, but was not looked into.  Current implementation of `Add::__hash__()` orders the elements first and then hashes. A better algorithm would be to add the hashes together. Benchmarks would have to be run to see if there is any difference. """,performance,performance,1,1
"""multilabel classification: extra option for terrain block to disable the update of the basetexture --- This adds another checkbox in the terrain datablock in the editor, where you can disable the auto generation of the basetexture, which allows you to use a custom basetexture for the whole terrain. Terrain generation software often puts out a precalculated basetexture and with this option you can use it by just renaming it into level.basetex.png or whatever and the engine will use it and not overwrite it.""",feature,feature,0,0
"""multilabel classification: Speed issues with benchmarks --- I recently update vim-jedi, and with it, the jedi submodule,  and it broke. Before I used to have near instantaneous completion suggestions when I typed in a dot, but after the update, it all broke. Any type of dot completions either take very long, or they completely fail (with vim saying Omni completion pattern not found)    So I had a rough idea that, I was on jedi v0.9.0 (a few commits after the official tagging of 0.9.0), and then after update, i moved to v0.10.0.    I ran `git diff v0.9.0..v0.10.0` which generated this: [jedi-diff-oneline](https://gist.github.com/notpratheek/ca0e1a5b852224272ff4ba9d61c5f548/) diff. (the link points to a gist)    I went ahead and manually tested through quite a few number of commits and added a few markers for when a certain commit failed.    `-XXX-` (or `-X-`) --> indicates that the commit failed / broke the plugin  `-***-`  --> indicates that the commit works ! (triple asterisk)    (sorry for the weird markers ! 😅)    and @blueyed  had mentioned""",performance,performance,1,1
multilabel classification: mvn package -DskipTests=true -B -Pprod command executes gulp tests with PhantomJS where we expect all the tests not to be executed --- ,bug,bug,0,0
multilabel classification: Add support for linkedin client via properties. Add support for oidc scope --- ,feature,feature,0,0
"""multilabel classification: Don't use a fresh context manager on every debug call --- I was moderately surprised to discover that of all things `_settings.py` was now one of the allocation hotspots. This turns out to be because we are calling `local_settings` on every `debug` call in the engine, which is a bit hungrier than I thought it would be. 😳     Anyway, this PR fixes that. It's unlikely to have a *huge* impact, but it should have a small one, and gets this method out of the allocation reports which makes it easier to notice what's going on with other things.""",performance,performance,1,1
"""multilabel classification: 使用SerializeConfig与ParserConfig配置自定义解析器无效 --- 通过实现ObjectSerializer与ObjectDeserializer，对自定义枚举进行序列化，目前使用JsonField注解为每个类中的自定义枚举属性配置相关解析器是ok的。但是通过SerializeConfig.getGlobalInstance().put(Enum.class, new CustomEnumSerializer());  ParserConfig.getGlobalInstance().putDeserializer(Enum.class, new CustomEnumDeserializer());  后使用JSON.toJSONString时发现无法生效，这是什么原因？    看了源码，config在注册的时候是按照当前class的类型来作为key，所以配置Enum.class是无效的，那么有没有相关配置可以实现我的需求呢?""",feature,feature,0,0
multilabel classification: Snapshots for strings are sometimes being transformed into objects/arrays --- ,bug,bug,0,0
multilabel classification: Faster bufwriter growth for non-lowmem targets --- Use 25% spare instead of 6.25% spare on default (desktop) build.,performance,performance,1,1
multilabel classification: Bare .resolves and .rejects can no longer be awaited in node@10.15 --- ,bug,bug,0,0
multilabel classification: Tiny micro-optimisation to reduce allocation in start_example --- tracemalloc informs me that lots of allocation is happening at this line. I side eyed it a lot and then decided to just sigh and deal with it.,performance,performance,1,1
"""multilabel classification: The duration of routing for hiking / pedestrian doesn't make any distinction between ascent and descent --- Hi!    GraphHopper adds the elevation data since a few years and that's fantastic. Having the elevation for each of the points of the route is really a wonderful data very appreciated when calculating hiking routes.    However, it doesn't seem to take into account the elevation data when calculating the time / duration of the `Path` or `Instruction`. I realized about this, when I wanted to calculate the reversed path of a given route with 2000m of ascent, and 500m of descent. When calculating the reversed route (which has 500m of ascent and 2000m of descent), I saw that the time estimate was exactly the same.    At the beginning I thought that there was a bug in the time calculation process, and that it didn't show the correct time for reversed routes. But after doing some more tests, I can see that a 5km route, with barely no elevation, has the same time (60min) than a route with 300m or 400m of ascent.    I see that in the config.yml, there's a comment saying the following:    > # bi""",feature,performance,1,0
multilabel classification: Social authentication with Google doesn't work when translation is disabled --- ,bug,bug,0,0
multilabel classification: Hazelcast + Cucumber - Running tests in IDE throws an ApplicationContextException --- ,bug,bug,0,0
"""multilabel classification: feature request """"metrics( texture )"""" --- would be nice to have 👍     metrics( texture )    How many texture loaded, texture memory.... """,feature,feature,0,0
multilabel classification: one-to-one relationship: Wrong $scope variable generated in entity dialog controller --- ,bug,bug,0,0
multilabel classification: CSS fails to load at first launch with Gulp --- ,bug,bug,0,0
multilabel classification: Separate dedicated server from engine --- Like issue say :) ,feature,feature,0,0
"""multilabel classification: multiplication instead of division in StrtodNormalPrecision method --- Hi,    I was going through the source code and found out that [StrtodNormalPrecision](https://github.com/Tencent/rapidjson/blob/7484e06c589873e1ed80382d262087e4fa80fb63/include/rapidjson/internal/strtod.h#L34) uses division. I was wondering, isn't it better to use multiplication as it is generally faster than division by extending [Pow10](https://github.com/Tencent/rapidjson/blob/master/include/rapidjson/internal/pow10.h#L29) constant map to accommodate negative pow? Is there a specific reason for that?""",performance,feature,0,1
multilabel classification: Pagination is causing issues when changing the number of items per page --- ,bug,bug,0,0
multilabel classification: constructing a CSR matrix from the coo input is slow. --- ,performance,performance,1,1
multilabel classification: extra option for terrain block to disable the update of the basetextu… --- …re 2    Little change that was missing in the first PR since Github web interface does not seem allow editing multiple files for a PR and I was lazy.,feature,feature,0,0
multilabel classification: Reset password finish is posting the password in the URL querystring instead of body --- ,bug,bug,0,0
multilabel classification: Jest fails because of outdated jsdom dependency in jest-environment-jsdom --- ,bug,bug,0,0
multilabel classification: babel-jest does not locate babel config when it is in root directory --- ,bug,bug,0,0
"""multilabel classification: More lenient base64 decoder, base64 performance improvements --- - [x] Allow missing ('Zm'), partial ('Zm='), and extra padding ('Zm====') in the base64 decoder  - [x] Improve base-64 fast path encoder and decoder performance  - [x] Improve base-64 slow path encoder and decoder performance without increasing footprint  - [x] Base64 testcase coverage improvements  - [x] Make base64 support optional (DUK_USE_BASE64_SUPPORT) and disable it by default in lowmem configuration  - [x] Make hex support optional (DUK_USE_HEX_SUPPORT) and disable it by default in lowmem configuration  - [x] 2.3 migration note for base64/hex and lowmem  - [x] Releases entry    Performance improvements for fast path on my development laptop (Intel(R) Core(TM) i7-4600U CPU @ 2.10GHz) measured using tests/perf/test-base64* (includes string intern after encode):  - Base64 encode: 1030 MB/sec in master, 1170 MB/sec after  - Base64 decode: 1770 MB/sec in master, 1900 MB/sec after    Performance improvements for slow path:  - Base64 encode: 130 MB/sec in master, 360 MB/sec after  - B""",performance,performance,1,1
multilabel classification: PERF: Be smarter about counting the number of minutes across a contiguous bunch of sessions. --- ,performance,performance,1,1
"""multilabel classification: pickling=True in save_module seems to slow down completions  --- Environment:    * python 2.7  * jedi from master branch (270f70ea7efaea23c325f2e307305900007e9e0c)  * test script:      If I force `pickling` to False in `save_module`, getting recommendations with no cache is much faster.    change:        Results from master:      Results with `picking = False`:    """,performance,performance,1,1
"""multilabel classification: Generating an entity called """"load"""" will cause a 400 error when adding a new load through entity management --- """,bug,bug,0,0
multilabel classification: hibernate lazyinitialisation exception calling getAllEntity with dtos and services --- ,bug,bug,0,0
"""multilabel classification: feat: 通过环境变量, 禁用 copy 操作. --- ## PR 描述  通过环境变量, 禁用 copy 操作 https://github.com/mozillazg/python-pinyin/issues/113.    ## 待办事项    * [x] 符合代码规范  * [x] 单元测试  * [x] 文档      <!--  感谢你的贡献！❤️  -->  """,feature,feature,0,0
multilabel classification: Jest hangs when a worker runs out of memory --- ,bug,bug,0,0
multilabel classification: Error: MomentLocalesPlugin: Moment.js doesn't include a locale you specified: ua. Check the plugins `localesToKeep` option --- ,bug,bug,0,0
multilabel classification: in production mode cookie theft exception is thrown every time when user's session expires jhipster v3.1.0  --- ,bug,bug,0,0
multilabel classification: Running --runInBand or --maxWorkers=1 and --no-cache invokes TypeError: Cannot read property 'some' of undefined in @babel/helper-module-transforms/lib/index.js --- ,bug,bug,0,0
multilabel classification: DTO getter does not have the same format as in toString --- ,bug,bug,0,0
multilabel classification: Multiple type definitions are not found using Jest 24.3.1 --- ,bug,bug,0,0
multilabel classification: Logging in with a language other than the language set in user settings breaks the translation --- ,bug,bug,0,0
multilabel classification: Running tests in coverage mode causes error with generated swagger docs --- ,bug,bug,0,0
multilabel classification: Generated tests for entities fail if there is a constraint on the string length --- ,bug,bug,0,0
multilabel classification: A loss of design direction (RTL) using arabic translation when refresh page --- ,bug,performance,1,0
"""multilabel classification: Adds some bake-to-collada functions --- Makes it so prefabs can correctly 'export to collada' by running the buildPolyList function on it's children.    Also adds a 'Bake Selection to Mesh' option to the tools menu in the editor to export the selected mesh to a collada file, and then replaces the selection with a TSStatic.""",feature,feature,0,0
multilabel classification: Pagination HTML does not show First anchor and Previous anchor not shown until after page 2 --- ,bug,bug,0,0
"""multilabel classification: Test failure for entities with service, JPA filtering, required relationship to User and a true DB --- """,bug,bug,0,0
multilabel classification: Adds the RotationF math class. --- The class is designed as a general-purpose rotation/orientation class to make it easy to work with rotations and swap between math types as easily as possible. ,feature,feature,0,0
multilabel classification: [BUG] User Management edit user throws exception while saving email that is already in use. --- ,bug,bug,0,0
"""multilabel classification: Add likely/unlikely attributes to resize operations --- Split most important resize operations into a hot part (check that no resize needed) and a cold part (resize actually needed). Because the resize part is relatively large, make it a separate cold/noinline function so that it won't get inlined into the main path; this improves code locality.    Also add likely/unlikely attributes to duk_api_stack.c error/range and API call argument validation checks.    This seems to improve Google benchmark score by about 5 points (difficult to measure accurately).""",performance,performance,1,1
"""multilabel classification: move nni_clock() operations to outside the nni_aio_lk. --- Testing (see #310 ) reveals that the nni_aio_lk is extremely hot.  There are big changes we can and should investigate here, but an easy way to reduce the hotness of that logic is to move the calls to nni_clock() outside of the lock.  The nni_clock() operation on some platforms includes expensive operations like divide, and in some cases register access or additional lock operations.  (Ideally this operation should be cheap, but its expensive enough to matter.)    Actually, on many systems, QueryPerformanceCounter is rather expensive; it may be beneficial to consider replacing this with GetTickCount long term.""",performance,performance,1,1
"""multilabel classification: mongoengine slow serialization of embedded documents with reference fields --- I have a small DB with about 500 records. Using the following model:    And performing:    I'm finding that the query and serialization time for `'form': self.form.short` case takes 1.12s and 1.36s, respectively, however, for the `'structure': self.structure.short` case it is 1.14s and 24.1s. The query times have not changed, however, the serialization time for an embedded document with a reference takes about 24 times longer...! Why such a big difference? I've also submitted this as a stackoverflow question in case someone wants some points. http://stackoverflow.com/questions/39088519/mongoengine-slow-serialization-of-embedded-documents-with-reference-fields """,performance,performance,1,1
"""multilabel classification: Performance compared to other libraries --- ## Prerequisites    - [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate  - [x] The issue still exists against the latest `master` branch of Select2  - [x] This is not a usage question (Those should be directed to the [community](https://select2.github.io/community.html))  - [ ] I have attempted to find the simplest possible steps to reproduce the issue  - [ ] I have included a failing test as a pull request (Optional)    ## Steps to reproduce the issue    1. run the tests on https://jsperf.com/chosen-select2-selectize    ## Expected behavior and actual behavior    When I follow those steps, I see... that select2 is orders of magnitude slower than other libraries that offer similar solutions.  See screenshot showing the **other libraries 64 times faster than select2**.    I was expecting... select2 to have comparable performance.    Perhaps the test case is bad, but it's best if someone familiar with the inner workings of select2 will loo""",performance,performance,1,1
"""multilabel classification: Internal optimization for unique lists with known number of elements --- For example, `sets(sampled_from(x), max_size=len(x))` will almost always stop due to rejection sampling before it reaches the max size - and so we're likely to miss errors that occur when all valid elements are present.  `min_size=len(x)` is just hilariously inefficient, and users would be better off with `permutations(x).map(set)`.    But why should users have to care about our internal limitations like this?  I propose to just fix this internally, by making `UniqueListStrategy` check if the elements strategy is a `SampledFromStrategy` (or `JustStrategy`), and if so using a variation on the shuffle in `permutations()` tuned to play nicely with `cu.more()`.  We'll also need a named identity function so we know when to unwrap `unique_by` and when to leave it alone.    I can't think of a nice way to make this apply to `dictionaries()`, but I haven't seen a use-case where that's a problem either so I think we can safely stick to the status quo.""",performance,performance,1,1
"""multilabel classification: Compare against """"The Great C++ Mathematical Expression Parser Benchmark"""" --- """,performance,performance,1,1
"""multilabel classification: Adds a debug visualization mode for the active physics world. --- Allows you to see the active collision info for the physics engine.  (Also catches that the glow buffer mode wasn't added to the empty template, apparently?) """,feature,feature,0,0
multilabel classification: Indivudual tests very fast but total time is always above 20sec  --- ,bug,performance,1,0
multilabel classification: Jest has detected open handle keeping Jest from exiting PIPEWRAP --- ,bug,bug,0,0
"""multilabel classification: Volumetric Fog Take 2 --- Went through, cleaned up the files and double-checked everything. """,feature,bug,0,0
multilabel classification: [Suggestion] Add replacement for prompt() as well --- Would be really cool if you would add a nice prompt() aka sweetPrompt() as well so one could use it to request user input. ,feature,feature,0,0
multilabel classification: Recent removal of postinstall of phantomjs breaks karma tests --- ,bug,bug,0,0
"""multilabel classification: Adds some filtering options to the console log gui --- Adds some filtering options to the console log gui so you can specify if you wish to be able to see errors, warnings and regular messages. It also denotes how many errors and warnings are currently in the log.""",feature,feature,0,0
multilabel classification: Entity/Component implementation --- Adds a (experimental-flagged) Entity/Component system to Torque 3D.  Can be activated via the advanced property TORQUE_EXPERIMENTAL_EC in cmake.  Note: Currently requires one of the Physics APIs(Bullet or PhysX) to be active as well to use any of the physics/collisions components. ,feature,feature,0,0
"""multilabel classification: Avoid DOM manipulation inside loops with jQuery --- using Select2 4.0.5    from a report on https://www.dareboost.com    Working directly with the DOM has a cost. If you have to add elements to a node, you should prefer to append them once rather than one by one.    """,performance,performance,1,1
multilabel classification: Jest complains about open handle when globalTeardown takes more than a second --- ,bug,bug,0,0
"""multilabel classification: Add closure microbenchmark (inner functions) --- Add a microbenchmark for exercising a function with a lot of inner functions. This exercises closure creation and entry to a function with a lot of inner function, which doesn't currently perform very well.""",performance,performance,1,1
"""multilabel classification: higher latency than zmq with small message --- Hi,  recently, I used the nng to replace the zmq in our project. however, In our test,  I find that nng（or nanomsg) has  higher latency than zmq with small message (less than 1M byte).   I use two nodes do the test.  one send one message to the other node. the other node receive the message and send it  back.  I calculate the time of such one round-trip.  Both nng and zmq use the pipeline model. and the code is almost the same as the example of nng and zmq.    here is the result :       latency（us） | 10 byte | 100 byte | 1000 | 10K | 100K | 1M | 10M|  -- | -- | -- | -- | -- | -- | -- | --  nng | 140 | 143 | 172 | 733 | 1231 | 8857 |  83472|  zmq  | 68 | 77 | 96 | 240 | 778 | 8143 | 81456      is that right? or is that any methods to reduce the latency of nng?""",performance,performance,1,1
"""multilabel classification: Change graph based on overlay data --- This PR makes it possible to feed external speed or access changes via GeoJSON. For now it is not yet integrated in e.g. GraphHopper core or web. But you can easily add it via:    pom.xml:    E.g. see FeedOverlayDataTest or an [example json file](https://raw.githubusercontent.com/graphhopper/graphhopper/reader-overlay-data/reader-overlay-data/src/test/resources/com/graphhopper/reader/overlaydata/overlaydata1.json)  Keep in mind that the order of any coordinate array is lon,lat and e.g. the bbox is min_lon,min_lat,max_lon,max_lat like specified in the [Geojson spec](http://geojson.org/geojson-spec.html). Also currently only three cases for a Feature are implemented: - `type=Point`,  - `type=MultiPoint` and  - no `type` and no `properties.coordinates` entry but with a bounding box entry `bbox`  It furthermore introduces a Json reader wrapper as discussed in #773 backed by Gson.  The overlay change functionality will stay in separate module `reader-overlay-data`. It goes even further and """,feature,feature,0,0
"""multilabel classification: Shared off-heap memory graph storage --- Currently the memory mapped and unsafe DataAccess allows offheap storage. It would be nice if different JVMs of the same server could access the same graph storage via the same shared memory (/dev/shm the in-memory based, shared memory virtual file system).    It is possible in Java, but not that easy. This will get more complicated especially with JDK9    Here are some links     * https://github.com/xerial/larray (LArray.mmap can create memory regions that can be shared between processes)   * http://javaforu.blogspot.de/2011/09/offloading-data-from-jvm-heap-little.html   * https://github.com/odnoklassniki/shared-memory-cache/blob/master/src/cache/UnsafeMemoryCache.java   * http://psy-lob-saw.blogspot.de/2013/04/lock-free-ipc-queue.html   * http://www.infoq.com/articles/Open-JDK-and-HashMap-Off-Heap   * some serialization tools (similar to valuetype) https://github.com/google/flatbuffers, https://kentonv.github.io/capnproto/roadmap.html and https://github.com/OpenHFT/Java-Lang   * http""",feature,feature,0,0
"""multilabel classification: initial version to open source the Isochrone API --- This was already [announced a long time ago](https://discuss.graphhopper.com/t/isochrone-in-open-source-version-of-graphhopper/695) some [other things are moving now](https://github.com/GIScience/openrouteservice) and so this might not be the latest and greatest solution, but we have the plan to improve this afterwards step by step :)    TODOs     - [x] rename package stuff from 'reach' to 'isochrone'    - [x] write tests for error messages and codes   - [x] include documentation #1303    - [x] dropwizardify #1333   - [x] ~~make UI working too e.g. either via separate asset endpoint or as separate application?~~ #1453   - [x] ~~make polygon creation faster as creating the points is already super fast!~~ later    ![image](https://user-images.githubusercontent.com/129644/37176394-8c65bf2a-231c-11e8-9a4e-a8445c8742d8.png)  """,feature,feature,0,0
"""multilabel classification: With Retries enabled, a failure in beforeAll is not thrown. --- """,bug,bug,0,0
"""multilabel classification: Fast, Non-lazy Completions.type --- Hey there !    For once not a bug, but a request for improvement.   With current IPython integration, I need to greedily compute the `.type` of all completions.  For the terminal version I could it lazily, notebook I can't. In some case (`matplotlib.` ) this can be gargantuesqually slow (don't know if it's an english adverb, but anyway), and AFAICT, jedi is reparsing – or not reusing some available context.    I do understand it can be hard to Guess if the context have changed.    So is there a way to tell jedi (like using a context manager): Thinks are not going to change underneath you, can you compute all these things at once ?    Right now it seem like an LRU cache in `mixed.py` does the trick ( line 120ish)        Though I understand that FastParser is _also_ made to recompute only what's necessary using DiffParser. But FastParser is supposed to have CachedFastParser as a metaclass so should it be cached .. but is not... Anyway getting late let me know if things make sens    """,performance,performance,1,1
"""multilabel classification: Completions on pudb causes high cpu in python repl --- I am using VSCode python extension and I saw that every time I try to autocomplete the command pudb.set_trace() python was using an awful lot of cpu.    I tried directly with Jedi and it seems to be an error when parsing the pudb package for autocomplete.    I ran in the python 3.4 repl two command:    The first work perfectly. The second one hangs and causes python3.4 to use one core at 100%. I need to kill it by hand.    I tried to autocomplete colorama and it also worked correctly.    ![pudb_autocomplete_high_cpu](https://cloud.githubusercontent.com/assets/279511/22858813/487d5f2a-f096-11e6-8135-0935a23860fb.jpg)    I am using Jedi 0.10.0 on python 3.4 in a pyenv. I am on Macos 10.12.3.    Vscode 1.9.1 is using Jedi 0.9.0 I think (not sure about that).    I also tried to do the same exeriment with Sublime Text 3 Anaconda with the following code:    and it seems to work. I am a bit loss why Sublime Text Anaconda manages to return the completions, but I am not able to do it in VSCode """,performance,performance,1,1
"""multilabel classification: SSE2/SSE4.2 support for UTF-16 --- In your docs you mention SSE is currently only supported for UTF-8 memory streams, I was wondering why is it not supported for UTF-16, as rapidjson supports UTF-16 streams.  Is it an issue with SSE itself or just the lack of implementation for it in rapidjson? """,performance,feature,0,1
multilabel classification: Adds a filter for materials to never import when importing a shape --- ,feature,feature,0,0
multilabel classification: Add DUK_HOT() and DUK_COLD() function attributes --- Add DUK_HOT() and DUK_COLD() mapped to `__attribute__((hot))` and `__attribute__((cold))` on GCC 4.3+. Try them out for bytecode executor inner function (hot) and error throwers (cold).,performance,feature,0,1
"""multilabel classification: Jest 24: Text Report shows stmts 0, branch 0, funcs 0 and lines 0 with no uncovered lines --- """,bug,bug,0,0
multilabel classification: CacheConfiguration.java template is generating the class with missing imports. --- ,bug,bug,0,0
multilabel classification: Implements a Material Instance viewer --- Implements a Material Instance viewer to the material editor to see a feature-filtered dump of the generated shaders for a given material.,feature,feature,0,0
multilabel classification: Requiring modules with isolateModules does not work if module has already been required with a non-isolated method e.g: using require.  --- ,bug,bug,0,0
"""multilabel classification: Add simple heuristic for clearing the data tree --- The data tree still has a tendency to get quite large, even with the new more compact representation, so this adds a fairly simple heuristtic for clearing it every now and then. A more sophisticated heuristic would probably be worthwhile, but I looked into it for a bit and decided it would probably have a very high complexity compared to the extra benefit. Something to think about in the long run.""",performance,feature,0,1
multilabel classification: Enables SDL's ability to drag and drop files onto the game window --- Enables SDL's ability to drag and drop files onto the game window and have it call back into script for handling.,feature,feature,0,0
multilabel classification: Cassandra driver error when starting Cassandra microsevice with docker-compose file --- ,bug,bug,0,0
multilabel classification: Compilation of fresh project failed when selected Social sign-in services and MongoDB --- ,bug,bug,0,0
multilabel classification: Swagger UI adds a :80 to the request url when used with https --- ,bug,bug,0,0
"""multilabel classification: Failure with completion for read() on ZipFile: """"RuntimeError: maximum recursion depth exceeded"""" --- I've tried to complete after `read()` of a `zipfile.Zipfile`, which took very long:    Using `strace`, it looks like it tries to open everything / a lot from the import path?!    In the end it aborts with `RuntimeError: maximum recursion depth exceeded`.  I hope I got the arguments to `jedi.Script` right (`len(s)`). """,performance,performance,1,1
"""multilabel classification: TAML, Assets and Modules implementation --- Initial implementation of the TAML, Asset and Module systems ported from T2D.  This is everything necessary for the base implementation and doesn't override any existing functionality. It comes with a blank example asset and a ShapeAsset that loads a shape file and stores the TSShape for later reference. """,feature,feature,0,0
multilabel classification: one to one relationships with dto does not compile --- ,bug,bug,0,0
"""multilabel classification: Collection view double-renders model if model changes during rendering --- If you change a model that's being rendered in a collection view, that model gets rendered twice. Code demonstrating the problem:    If you remove the initialize method in the V view class, the problem disappears.  Fiddle demonstrating the issue against 2.2.1: http://jsfiddle.net/XmFJ9/1/  This issue isn't present in 2.0.0rc3, but is in 2.0.0rc6. """,performance,bug,0,1
multilabel classification: jest fails to work when temp dir is on a RAM drive (Windows) --- ,bug,bug,0,0
multilabel classification: Improve memoization performance --- Use AtomicReference directly rather than via LazyImmutable (less Object creation).,performance,performance,1,1
multilabel classification: Configure target host from web interface --- It will be nice to be able to change target host from web interface. My suggestion: - Command-line `--host` argument value is used as default (initial) `host` value and become optional. - Add a new field _Target host_ to _Start new Locust swarm_ dialog. This field should be used to change `host` value from web interface without need to restart locus server. - `host` may not be changing while locust swarm is running. ,feature,feature,0,0
multilabel classification: JWT does not work with Spring Security Evaluation Extension --- ,bug,bug,0,0
multilabel classification: TestCase error when generating  microservice project with oauth2 authentication type --- ,bug,bug,0,0
"""multilabel classification: Add a best effort heap-wide object property slot cache --- Add a heap-wide property slot cache:  - Lookup key is a combination of `duk_hobject *` and a key string hash.  - Lookup value is a possible property slot (integer).    Property lookup changes:  - If object has hash part, use the hash part without using the slot cache.  - Otherwise, look up the slot cache using object/key.  - Validate the returned slot index: check that it's within the object's property table, and check that the key matches. If so, use the slot as is.  - Otherwise do the usual linear scan to find the key. When found, overwrite the property slot cache entry with the slot index.    The upsides of this approach are that:  - Unlike hash tables, it emphasizes actually looked up object/key pairs. No upfront work is done like with hash tables.  - There is no GC impact in ensuring the entries are valid (compare to the relatively tricky generation-based validity handling in the property cache prototype). The slot index is always just a best guess, and is always validated.  - The""",performance,feature,0,1
multilabel classification: Jest mockResolvedValue does not work with arrays in Typescript --- ,bug,bug,0,0
multilabel classification: Can't use babel-plugin-rewire with jest: The module factory of `jest.mock()` is not allowed to reference any out-of-scope variables --- ,bug,bug,0,0
multilabel classification: Introduce new getData method to avoid 64bit limit of getFlags --- Open questions     - int getData(int index) or maybe byte getData(int index) or `ByteRef getData(int index)` like lucene does similar? `int getData` would be easy to implement and not that bad.   - How to do this with #472   - Or should we implement a list of GraphExtension? This would allow more dynamically sized data and optional compression   - Or just a separate DataAccess nicely integrated in GHStorage    See something already in this branch https://github.com/graphhopper/graphhopper/compare/intsref_refactoring    Best would be if we can avoid getData method and use higher level methods instead.    ~~getFlags would be still necessary as it is the only 'column' where reversing is applied (#728)~~    Not part of this issue is to change the data type `long` to `byte[]` in the OSMReader IMO.,feature,feature,0,0
"""multilabel classification: Add internal duk_concat_2() helper for str+str arithmetic --- - [x] Add internal duk_concat_2() helper  - [x] Use it for executor str+str arithmetic, remove unnecessary ToString() in the call site (concat does it)  - [x] Add perf test  - [x] Releases entry""",performance,feature,0,1
"""multilabel classification: Test """"isVisible() rendering bypass"""" Performance --- As I was cutting jQuery out of the library (#62) I came across an interesting [article](http://stackoverflow.com/questions/19669786/check-if-element-is-visible-in-dom) on StackOverflow that lead me to this [jsperf](http://jsperf.com/check-hidden) showing that depending on how you check visibility there can be some serious performance consequences.  Let's build a test on http://jsperf.com/ to see just how much performance you gain having to check for visibility each frame. Specifically we should test the following: 1. Visible container rendering with check 2. Visible container rendering without check 3. Invisible container rendering with check """,performance,performance,1,1
"""multilabel classification: jdl creates """"many-side"""" in both entities for relationship manyToOne --- """,bug,bug,0,0
multilabel classification: Default microservice stack doesnt work out of the box --- ,bug,bug,0,0
multilabel classification: Bug: Entity dialog submit button is not re enabled on error --- ,bug,bug,0,0
"""multilabel classification: cached_test_function should not execute test function when it would overrun --- As @Zalathar pointed out in #1540 (and is now commented), currently `cached_test_function` will re-execute the test function in some cases where it knows that it cannot work because it's a strict prefix of a previously evaluated test.    In these cases it should avoid that re-execution and should instead return a fake `ConjectureData` object of some sort that indicates it overran.    (In theory it could synthesise a picture perfect accurate one with all the right data, but I don't think we actually need to do that - it's probably better if it's *not* a real ConjectureData object and errors if you try to do anything other than access its status and buffer)""",performance,performance,1,1
"""multilabel classification: JHipster 4.0.7 with Gradle+Kafka fails with """"object is not an instance of declaring class"""" --- """,bug,bug,0,0
multilabel classification: spyOn getter requires explicit type on getter after Jest 24 --- ,bug,bug,0,0
"""multilabel classification: Don't store the entire ConjectureData object in the tree --- This limits the scope of the `DataTree` to only store enough information to recreate the buffer and status of the stored `ConjectureData` objects. We then use a standard cache to map the rewritten buffers to the generated `ConjectureData` objects so that the shrinker still has access to them during shrinking, but eviction is now possible.    The reasoning is that `ConjectureData` objects are really large and memory hungry, and for the overwhelming majority of our tree usage we don't actually need them, so by avoiding storing them for that we can significantly reduce the memory profile.""",performance,performance,1,1
"""multilabel classification: Sometimes can't generate without prompt, even if there is file .yo-rc.json and other generation problems --- """,bug,performance,1,0
multilabel classification: root user in Jenkinsfile prevent jenkins to execute commands --- ,bug,bug,0,0
"""multilabel classification: Add DUK_HOBJECT_FLAG_FASTREFS to duk_hobject --- Refzero and mark-and-sweep need to DECREF/mark all actual strong references held by a duk_hobject. Because there are multiple duk_hobject sub-struct the DECREF/marking code needs to check multiple bits to see which sub-struct is used. Because most garbage collected objects are plain objects and arrays, and they don't have a sub-struct, several unnecessary bit tests are made for them.    Add `DUK_HOBJECT_FLAG_FASTREFS` which indicates that the object either (a) doesn't have a sub-struct, or (b) has a sub-struct but there are no strong references needing a DECREF/marking in the sub-struct. When the flag is set, DECREF/mark code can quickly skip testing the other flags.    As a technical side effect `Duktape.Thread.prototype` is changed to have an internal class of Object rather than Thread. This is needed due to flag changes; a `duk_hthread` is now recognized by its internal class rather than `DUK_HOBJECT_FLAG_THREAD` so whenever an object's inner class is Thread, Duktape internals assum""",performance,feature,0,1
"""multilabel classification: Also calculate blocks lazily --- Hey, psst, buddy, would you like to see some really weird code? Then boy do I have the PR for you.    Following on from #1828 where we calculated `examples` on first use, this also allows us to calculate `Block` objects on first usage.    Unfortunately the big differences between `Example` and `Block` are that a) We use blocks a lot more and b) We need them during generation time. This means that the `Example` approach of just deferring until we first access the collection is a non-starter.    So this does uh something else. The basic idea is that we can create a collection that only _looks_ like a list of blocks but actually only stores the endpoints until we first ask it for each block object.    Important features:    * If we only ask for a small number of blocks then we only build a small number of blocks. e.g. stateful testing asks for the last block generated (due to slightly dodgy reasons), and doing that should not cause all blocks to be calculated.  * A lot of things that coul""",performance,feature,0,1
"""multilabel classification: collection itemFilter should prevent filtered item markup from rendering --- Currently, using itemFilter will simple hide item level markup.  This can cause a problem if that item level data contains form fields which should not be retrieved when serialize is called. """,performance,performance,1,1
"""multilabel classification: Volumetric Fog with corrections --- Based on the Winterleaf PR #1059, this adds corrections so that it works with HDR being active, and also utilizes ambient color so that it works with day/night cycles, rather than being unlit during low-light settings. """,feature,feature,0,0
multilabel classification: Minification for prod skips js files in custom folders sometimes --- ,bug,bug,0,0
"""multilabel classification: Slow pandas completion --- I'm getting significant lag in emacs (company-mode with anaconda backend), while completions seem to break entirely with vim (YouCompleteMe) where it won't complete anything anymore for a long, long time when using pandas 0.15.1. Here is some example code:    It is at this point where lag in emacs becomes unbearable, while vim will happily continue to work, but all completions from YouCompleteMe will not work anymore (including completions for a different library).  Now, it seems the issue is that the getting the completion candidates is a costly affair in jedi itself:    Which gives me:    A similar timeit operation on os.path. completion gives me 9 ms, so it seems to me like that might be the source of the problem. """,performance,performance,1,1
"""multilabel classification: Performance degradation from 3.30.0 to 3.66.1 due to many """"invalid examples"""" --- Hi all,    I wrote a strategy for generating NetworkX graphs (https://github.com/pckroon/hypothesis-networkx), but testing that code is super slow. Previous issues here made me look at some older versions of hypothesis, and 3.30.0 in particular. It seems that the current version produces many many more invalid examples for some reason. Here's the statistics for both versions I tried:    For 3.66.1:      And for 3.30.0:  """,performance,performance,1,1
"""multilabel classification: >2 second lag in some cases using python 3 --- Forgive me if this is a known issue, I couldn't find it listed in the backlog.  I just started using Jedi with Vim to help edit python 3 scripts.  It works ok so far, but occasionally it locks up for sometimes as long as 2 seconds after triggering completion.  I tried looking into it briefly myself and turned on `jedi#enable_speed_debugging`, which resulted in this output:  https://dl.dropboxusercontent.com/u/2959315/temp/error_output.png  Which seems to point to some imports like datetime taking quite a long time """,performance,performance,1,1
"""multilabel classification: Expanded mesh baking functionality --- Expanded mesh baking functionality, now supporting baking of LODs and Collision meshes""",feature,feature,0,0
"""multilabel classification: Jedi on sublimeText3 too slow. --- When I typing code. It's very lagging...  For example:  content = res.content.decode('utf-8')  When I typing these code, on first c its lag..  res. its lag..  How to fix it ???  not a large file.  Look when i typing res.   ![jedi_lag](https://user-images.githubusercontent.com/40101424/48302838-d2aaaf80-e53c-11e8-9fd4-52ab08efd680.gif)  """,performance,performance,1,1
multilabel classification: Consider dropping expand-token attribute support for subexpressions --- I.e.  `{{i18n (expand foo{{bar}})}}` vs. `{{i18n foo{{bar}} expand-token=true}}`  Pros: More explicit when there may be security concerns. Cons: Subexpressions are a bit slower than just executing one helper. As of right now they can't be resolved via `trackIds`. ,performance,feature,0,1
multilabel classification: [Feature Request] Large world support --- Would it be possible to get large world support in the main branch of T3D?    Here is what I mean by that -   1. Terrain paging via [Terrain Master](https://github.com/ChrisCalef/T3DTerrainMaster)  2. Origin Shifting Via PhysX - http://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/guide/Manual/OriginShift.html   3. Expose Origin shifting as a component    Since we already use PhysX This is part of the issue solved. However It would be dependent on getting physx 3.4.0 into the engine. I know that @rextimmy has a PR for that though. https://github.com/GarageGames/Torque3D/pull/2186,feature,feature,0,0
"""multilabel classification: Need PATRICIA trie for SUB --- When faced with very many subscriptions, we wind up doing a very poor filter of the topics, which can be O(n * k), which is not good.  Patricia is O(k).    We can steal the code from libnanomsg (though we will need to adapt it.)""",performance,feature,0,1
multilabel classification: Entity links to the User entity do not work --- ,bug,bug,0,0
"""multilabel classification: Implements hold and context keybinds --- Implements hold and context keybind functionality, enabling the ability to have actionmap binds for holding down a button(complete with hold time return if needed) and context binds for being able to have different events for tapping and holding on the same key.""",feature,feature,0,0
multilabel classification: Self referenced entities generated using JDL import error on Angular 4 --- ,bug,bug,0,0
"""multilabel classification: Provide support for Windows formatted timezones --- I'm trying to use moment to create a calendar ics file with the appropriate timezone, but since moment uses IANA timezone format and Outlook doesn't, i'm needing to find some way of converting the IANA name to windows so it recognizes the timezone name. It would be great if you had some function to get the Windows-compatible timezone name. Not like i'm in love with windows or anything, but everyone seems to have outlook.  Thanks! """,feature,feature,0,0
"""multilabel classification: Improve location lookup to avoid geocoding mismatch --- As mentioned in #549 I am currently looking into improving the location lookup. So what I did, was to extend the LocationIndex Interface for a new method, that matches not necessarily the closest but the best match, by comparing not only geographic distance but also the Levenstein distance.  Right now this is really simplistic and only a brief draft of how this could look like. As usual I like to discuss a draft first, before implementing too much detail :). However, the shown implementation matches the correct Street, for the example in #549, see the new IT.  So things that need to be done: - [x] Implement the `point_hint` parameter - also decide about the design of this parameter. - [x] Implement a more sophisticated 'Good Match', for example if the name is 5% of the perfect match. But then we would have to check if the distance from the best match from the current closestMatch is smaller than from the current. Not sure if this is worth the trouble? - [x] Prepare strings before compa""",feature,feature,0,0
multilabel classification: JHipster 2.18 - Swagger Docs V2 - Unauthorized with Oauth2 --- ,bug,bug,0,0
"""multilabel classification: Ai turret ignore list functions --- Implements feature(s) requested in issue #1272   The first feature is exposing a function to Torquescript that allows retrieving the count of the total number of objects on a turret's ai ignore list, ignoreListCount().    The second feature is exposing a function to Torquescript that allows retrieving a reference to an object on an AI turret's ignore list based off of the index in the list of that object, rather than the object's ID (so the object's ID does not have to be known beforehand).  The feature request issue #1272 requests for this feature to return the object's ID but then shows an example modifying the object directly (increasing the health of the object by 10), so to fulfill the requested functionality based on the example, this feature returns a reference to the object itself so that properties can be called and modified on the object directly, as shown in the example on the feature request.""",feature,feature,0,0
multilabel classification: Error when entity have a attribute enumeration (enum java). --- ,bug,bug,0,0
multilabel classification: Watch usages would be more intuitive if they were not case sensitive. --- ,bug,feature,0,0
"""multilabel classification: Add cancelButtonColor option --- It would be nice to have a `cancelButtonColor` option, similar to `confirmButtonColor`. """,feature,feature,0,0
"""multilabel classification: Component created using React.memo appears as """"Component"""" in snapshot --- """,bug,bug,0,0
multilabel classification: setDocumentRoot should not be called when running .war with java -jar --- ,bug,bug,0,0
multilabel classification: Add distance path detail --- We already have time and to avoid client side distance calculation we could easily offer this,feature,feature,0,0
"""multilabel classification: Don't calculate exception lists until we first need them. --- It turns out that importing `pytest` is surprisingly slow, to the point that it shows up as a significant cost when running Hypothesis under a profiler.    This PR changes our imports that we use to determine skip and failure exceptions to only happen when we first catch an exception. We still have to pay the cost (if you're not using the internal API, which I am), but this makes the initial import a lot faster, which can also be relevant for interactive usage.""",performance,performance,1,1
"""multilabel classification: Reverse property read entry vs. array part check order --- Because almost all array part reads go through the fast path, check the entry part first (previously array part was checked first) which is slightly faster. A property never exists in both parts at the same time, so the check order has no functional importance.""",performance,performance,1,1
multilabel classification: Executing the WAR file without an application server wont work with hazelcast --- ,bug,bug,0,0
multilabel classification: NPE executing liquibase:diff if oauth2 is selected as authentication method --- ,bug,performance,1,0
multilabel classification: Bug in multiselect when using react and many-to-many relationship --- ,bug,bug,0,0
"""multilabel classification: Adds a new function for defining network-aware console fields on NetObjects --- Adds a new function for defining static console fields on NetObjects- addNetworkedField()    This lets you attach a 32 bit netMask to the field, so that when it is changed, it automatically flags the associated bitmasks on the netobject as dirty.    This is to shortcut having to flag certain masks being marked as dirty through protected fields and just simplify/streamline the code.""",feature,feature,0,0
multilabel classification: Get rid of closure reference to `resolvedPromise` in `defer` --- Some memory profiling reveals this to be a bit problematic.  We only really need it for `promise.inspect()` (and `promise.valueOf()`). The rest of the references could be replaced with a boolean. ,performance,feature,0,1
"""multilabel classification: Remove unnecessary check for hrule in parseListMarker --- By the time parseListMarker is called, the hrule block start was already tried. In case it matches, no further block starts are tried. So the later check is not necessary and can be removed.  Mirrors jgm/commonmark.js#19 """,performance,feature,0,1
multilabel classification: Windows: cannot run production build for a monolith app with version 5.8.2 --- ,bug,bug,0,0
"""multilabel classification: Add internal duk_hboundfunc type and collapse bound function chains --- Add a separate internal `duk_hboundfunc` type for faster bound function handling. Also collapse bound function chains on creation so that the target of a bound function is always a non-bound function directly.    - [x] Add duk_hboundfunc, changes in call handling etc to use it  - [x] Improve bound function call handling to allocate a gap and copy tvals there rather than using duk_dup() + duk_insert() which gets quite slow for large argument counts  - [x] Check for footprint improvements, follow-ups if necessary  - [x] Review and finalize changes  - [x] Testcase changes  - [x] Check dump/load handling for bound functions, add test coverage  - [x] Releases entry""",performance,performance,1,1
"""multilabel classification: JSON endpoint for dynamic speeds, blocking etc --- implement option 1 discussed [here](https://discuss.graphhopper.com/t/more-flexibility-in-gh/71/3)    """,feature,feature,0,0
multilabel classification: Unused import in e2e tests for entities with byte+text --- ,bug,bug,0,0
multilabel classification: Issue #713 part 1: store tunnel and bridge tags. --- This PR adds a few utility methods to check if the edge is a tunnel or a bridge edge. ,feature,feature,0,0
multilabel classification: `yarn check` prints out two warnings when installing the latest Jest 24.4.0 packages --- ,bug,bug,0,0
"""multilabel classification: Implement an initial version of property caching --- Implement an initial version of property caching where the property cache key is a (generation, object, key) triple. The cache is implemented in GETPROP (the most common property read operation) and the object in the triple is for the starting point of a property lookup. The generation count is a quick way of invalidating the whole cache on any property write or other operation risking cache integrity: entries can be invalidated by a single heap-level generation counter increment without touching the entries themselves. The generation is checked on a cache lookup; no hash chaining is used, and each property lookup hash has only a single slot.    So far this is pretty experimental and some invalidation cases are still missing. The goal is to try to figure out if the approach is workable given all the low level details. Quite possibly some small detail may prevent this from being finished as a viable feature.    Initial results are reasonable however:  - tests/perf/test-array-read-lenloo""",performance,feature,0,1
multilabel classification: Entity `update` integration tests are persisting changes to the test database immediately --- ,bug,bug,0,0
"""multilabel classification: Expect dies with """"ReferenceError: Element is not defined"""" in """"node"""" test environment --- """,bug,bug,0,0
multilabel classification: [feature request] Direct ray-subd intersection --- +1.   https://groups.google.com/forum/#!topic/opensubdiv/Ru5sHZD0gGo  It would be great if OpenSubdiv have efficient direct ray-patch intersector with spatial accelerator(e.g. BVH).  Efficient ray - patch intersector will be applicable for texturing purpose also: e.g. ptex texture painting on non-OpenGL environment.  ,feature,feature,0,0
multilabel classification: Keytool command used in generateKeyStore doesnt work in windows --- ,bug,bug,0,0
"""multilabel classification: Make logging timestamps etc optional --- For debug purposes, the logging ouput prepended with host, timestamp and so forth can make it difficult to parse the output. For example, pretty printing json files becomes a hard to read affair. A simple command line option should suffice. """,feature,feature,0,0
multilabel classification: AuditEventConverter throws NPE if AuditEvent is created with a key and no value for data --- ,bug,bug,0,0
"""multilabel classification: Separate engine into dynamic modules (.dll/.so/.dylib) --- Separate everything into separate modules. For example console, postFX, component, gui, etc., etc., to be in modules """,feature,feature,0,0
multilabel classification: Missed update in Elasticsearch after update user via service/UserService.updateUser --- ,bug,bug,0,0
multilabel classification: How do I change the favicon.ico from the spring leaf to my own figure? --- ,bug,feature,0,0
"""multilabel classification: Miscellaneous performance improvements --- Miscellaneous performance improvement issues to test:  - [ ] Use a 'regs' pointer in executor stack frame instead of on-the-fly thr->valstack_bottom lookup - #298  - [ ] Use a stack local `interrupt_counter` in executor, with handling similar to stack local `curr_pc`  - [ ] Add debug instrumentation for setjmp/longjmp counts, as these are important value to optimize with Emscripten  - [ ] Check relevance of bytecode dispatch switch handling for Emscripten performance  - [ ] Improve compiler handling of label sites: omit explicit label site if it won't be needed (useful for making iteration statements faster); perhaps optional because of compiler footprint  - [ ] Emscripten: use struct instead of union for duk_tval?  - [ ] Further DUK_TVAL_SET_xxx_UPDREF() tweaking, add fast variants to all macros, check call sites and use fast ones only in hot spots  - [ ] Direct tval push macro test in API  - [ ] JSON leftovers described in: https://github.com/svaarala/duktape/pull/445#issuecomment-15""",performance,performance,1,1
"""multilabel classification: jest ALWAYS runs all files, ignoring the --onlyChanged option --- """,bug,bug,0,0
"""multilabel classification: Separate core module from osm reading --- Fixes #450 e.g. removing xml dependencies from model classes (node, way, relation). Moves several OSM related classes and tests into the module and makes it possible to avoid this overhead for Android. The breaking change now is that all code requiring OSM import has to change - maven dependency from `core` to `reader-osm` - change `GraphHopper` to `GraphHopperOSM`  But this makes integrating like #616 very easy e.g. in a submodule without effecting current dependencies which I really like.  The OSM parsing stuff is still included in the FlagEncoders like converting units to SI units or workarounds for certain OSM issues as well as parsing strings into objects. Such a change would be more intense and requiring us to convert the OSM data into some kind of intermediate object format. Another option would be to define a subset of OSM which is stricter and less complex but still valid OSM and use this as the intermediate format. But this is for another issue... """,feature,feature,0,0
,,,0,0
